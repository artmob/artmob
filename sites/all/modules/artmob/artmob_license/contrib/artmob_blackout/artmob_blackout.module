<?php
// $Id: artmob_blackout.module,v 1.0 2008/03/01 08:31:22 drumm Exp $

/**
 * @file
 * Contains ability to Blackout node fields.
 */

define( ITEMSTATUS_REMOVED, 'Removed' );
define( ITEMSTATUS_BLACKED_OUT, 'Blacked Out' );


function artmob_blackout_init() {
/*
   $fd_path = drupal_get_path('module','artmob_fair_dealing');
   $module_path = drupal_get_path('module','artmob_blackout');

   $fd_js = $fd_path .'/js';
   $fd_css = $fd_path .'/css';

   $module_js = $module_path .'/js';
   $module_css = $citation_path .'/css';

   $fd_scripts = array('jquery-min-14.js','fairdealing_var.js','fairdealing_ui.js');

   $arg0 = arg(0);
   $arg1 = arg(1);
   $arg2 = arg(2);

   if ($arg0 == 'node' && is_numeric($arg1) && ($arg2 == 'copyright' || $arg2 == 'license')) {
     $db_query = db_query("SELECT title, type FROM {node} WHERE nid=%d",$arg1);

     $nobj = db_fetch_object($db_query);

     $filetypes = array(
       'DigitizedWorks' => '1',
       'amDocument' => '1', // forward compatibility
       'amVideo' => '2',
       'amPicture' => '3',
       'audio' => '4',
       'amAudio' => '4', //forward compatibility
     );

     $filetype = $filetypes[$nobj->type];

       drupal_add_js(array('afd' => $artmob_fair_dealing_settings), "setting");

       foreach ($fd_scripts as $js) {
         drupal_add_js($fd_js ."/". $js,'module');
       }

      drupal_set_title("Blackout: ". $nobj->title);
   }
   */
}

/**
 * Implementation of hook_menu().
 */
function artmob_blackout_menu($may_cache) {
  $items = array();

  if ($may_cache) {

  }
  else {
    $items[] = array(
      'path'              => 'notifications/blackout',
      'title'             => t('Fair Dealing Blackout'),
      'description'       => t(''),
      'weight'            => 5,
      'callback'          => 'drupal_get_form',
      'callback arguments' => array( 'artmob_blackout_notifications_blackout'),
      'access'            => user_access('administer site configuration'),
      'type'              => MENU_LOCAL_TASK,
    );

    $items[] = array(
      'path'              => 'admin/artmob/blackout',
      'title'             => t('Blackout Configuration Options'),
      'description'       => t('Modify blackout configuraion options'),
      'weight'            => -7,
      'callback'          => 'drupal_get_form',
      'callback arguments' => array( 'artmob_blackout_config_settings'),
      'access'            => user_access('administer site configuration')
    );

  }
  return $items;
}

function artmob_blackout_notifications_blackout() {
  $form = array();
  $form['#attributes'] = array('enctype' => "multipart/form-data");

  $form['blackout_mode'] = array(
    '#type' => 'hidden',
    '#value' => arg(2)
  );

  $form['ticket_nid'] = array(
    '#type' => 'hidden',
    '#value' => arg(3)
  );


  $blackout_mode = arg(2);
  if ($blackout_mode == 'add' ) {
    $msg = t('Are you sure that you want to blackout this item?' );
  } 
  else {
    $msg = t('Are you sure that you want to remove the blackout from this item?' );
  }

  $form['ticket_display'] = array(
    '#value' => $msg,
    '#weight' => -5,
  );

  $form['resolve_cancel'] = array(
    '#type'          => 'submit',
    '#value'         => t('Submit'),
    '#weight' => 0,
  );

  $form['resolve_submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Cancel'),
    '#weight' => 4,
  );


  $form['#submit'] = array(
    'artmob_blackout_notifications_blackout_submit' => array()
  );

  return $form;

}

function artmob_blackout_notifications_blackout_submit($form_id, $form_values) {
  // drupal_set_message( 'ticket nid = '.$form_values['ticket_nid']);
  if ( $form_values['op'] == 'Submit' ) {
   $blackout_mode = $form_values['blackout_mode'];
   if ($blackout_mode == 'add' ) {
     db_query( "UPDATE {am_blackout} set blackout_mode = 1 where nid = %d", $form_values['ticket_nid'] );
     drupal_set_message('This item has been blacked out');
   } 
   else {
     db_query( "UPDATE {am_blackout} set blackout_mode = 0 where nid = %d", $form_values['ticket_nid'] );
     drupal_set_message('The blackout for this item has been removed');
   }
 } 
 else {
   //drupal_set_message('cancelled');
 }

  return 'admin/artmob/notifications';
}

function artmob_blackout_config_settings() {
  $form['blackout_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Blackout Options'),
    '#weight' => -2
    );

  $form['blackout_settings']['blackout_message'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Blackout Message'),
    '#default_value' => variable_get('blackout_message', '' ),
    '#description'   => t("enter the message that will appear when content is blacked out"),
    '#tree'          => 'FALSE',
    '#rows'          => 3,
    '#required'      => FALSE
  );
  $form['blackout_settings']['blackout_format'] = filter_form(variable_get('blackout_format', 0 ));

  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter().
 *
*/
function artmob_blackout_form_alter($form_id, &$form) {
  // boilerplate code to determine the node type of the form
  if (isset($form['type'])) {
    $type = $form['type']['#value'];
  }
  elseif (isset($form['orig_type'])) {
      $type = $form['orig_type']['#value'];
  } 
  else {
    return;
  }

  switch ($form_id) {
    // Form addition that appears on Content Types page. Drupal saves as a setting.
    case 'node_type_form':
      //$myarray = array('artmob_blackout_blackout_submit'=> array());
      //$form['#submit'] = array_merge( $myarray, $form['#submit'] );

      break;
    case $type .'_node_form':
      $form['artmob']['blackout'] = array(
        '#type' => 'fieldset',
        '#tree' =>  FALSE,
        '#title' => 'Blackout Content',
        '#collapsible'  => TRUE,
        '#collapsed'  => TRUE,
        '#weight' => 5,
      );

      $blackout_mode = db_result( db_query( "SELECT blackout_mode FROM {am_blackout} where nid = %d", $form['nid']['#value']) );
      $form['artmob']['blackout']['blackout_mode'] = array(
        '#type' => 'checkbox',
        '#title' => 'Blackout this content?',
        '#description' => t('Blacking out content will hide it from users but leave information about that content visible. This may be used in circumstances where copyright concerns require the removal of content, but the information captured about it remains useful to users.'),
        '#default_value' => $blackout_mode
      );
      break;
  }
}

/*
function artmob_blackout_blackout_submit($form_id, $form_values) {
}
*/

/**
 * Implementation of hook_nodeapi().
 *
 */
function artmob_blackout_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'submit':
      break;
    case 'update':
      $bupdate = TRUE;

      //Fall through, with flag.  Therefore with every update we delete
      //the old associated records and then resave the new ones

    case 'delete':
      if ( $node->type <> 'license') {
        db_query('DELETE FROM {am_blackout} WHERE nid=%d', $node->nid);
      }

      if (!$bupdate) {
        break;
      }

    case 'insert':
      if ( $node->type <> 'license') {
        db_query("INSERT INTO {am_blackout} (nid, uid, blackout_mode ) VALUES (%d,%d,%d)", $node->nid, $node->uid, $node->blackout_mode );
      }
      break;
    case 'load':
      $oresult = db_query("SELECT * FROM {am_blackout} WHERE nid=%d", $node->nid);
      while ($orow = db_fetch_object($oresult)) {
        $aload['blackout_mode'] = $orow->blackout_mode;
      }
      return $aload;
      break;
    case 'prepare':
      break;
    case 'view':
      if ( $node->blackout_mode ) {
        foreach ( $node->content as $key => $value ) {
          if ( ( $key <> 'artmob_summary' ) and ( $key <> 'artmob_respond_summary_icons' ) and ( $key <> 'exhibit_browser' )) {
            unset($node->content[$key]);
          }
        }
        
        $node->content['body']['#value'] = check_markup(variable_get('blackout_message', '' ), variable_get('blackout_format', FILTER_FORMAT_DEFAULT), FALSE);
      }
      break;
    case 'update':
      break;
    case 'delete revision':
      break;
    case 'submit':
      break;
  }
}


// Implementation of hook_help().
function artmob_blackout_help($section) {
  switch ($section) {
    case 'admin/help#description':
      return t('Enables the creation of blackout information.');
      break;
    case 'admin/modules#description':
      return t('Enables the creation of blackout inforamtion.');
      break;
    case 'admin/node/add#artmob_blackout':
      return t('A blackout. Use this page to add a blackout.');
      break;
  }
}

function artmob_blackout_IMAGE_PATH() {
  return base_path() . path_to_theme() ."/images";
}
