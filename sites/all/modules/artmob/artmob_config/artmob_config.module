<?php
// $Id: artmob_config.info,v 1.0 2008/03/13 20:55:33 dries Exp $

/**
 * @file
 * ADDDOCUMENTATION
 */

//----------------------------------------------
// CONSTANTS
//----------------------------------------------

//----------------------------------------------
//* Implementation of hook_node_info().

/*
function artmob_config_node_info() {
  return array(
    'artmob_config' => array(
      'name' => t('Config'),
      'module' => 'artmob_config',
      'description' => t("This allows a user to save and load a configuration")
    ),
  );
}
*/

/**
 * Implementation of hook_help().
 */
function artmob_config_help($section) {
  switch ($section) {
    case 'admin/help#artmob_config':
      $output = '<p>'. t('The artmob config module allows a user to save and load a configuration') .'</p>';
      return $output;
    case 'admin/modules#description':
    case 'admin/settings/artmob_config':
      return (t('allows a user to save and load an artmob configuration.'));
  }
}

// Implementation of hook_perm().

function artmob_config_perm() {
    return array('Load Configuration', 'Save Configuration', 'Delete Configuration');
}


// Implementation of hook_access().

function artmob_config_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return False;
  }

  else if ($op == 'update') {
    return False;
  }
  else if ($op == 'delete') {
    return False;
  }
  else if ($op == 'view') {
    return False;
  }
  else {
    return FALSE;
  }
}

//----------------------------------------------
/**
 * Implementation of hook_menu().
 */
function artmob_config_menu($may_cache) {
  $items = array();

  if ($may_cache) {
  } 
  else {
  /*
    $items[] = array(
      'path'               => 'admin/artmob/configuration',
      'title'              => t('artmob configuration settings'),
      'description'       => t('Adjust configuration options'),
      'weight'             => -7,
      'callback'           => 'drupal_get_form',
      'callback arguments'=> array( 'artmob_config_admin_settings'),
      'access'             => user_access('administer site configuration')
    );
  */
    $items[] = array(
      'path' => 'admin/artmob/auto_config',
      'title' => t('create default configuration profile'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('artmob_config_form', NULL),
      'description' => t('Delivers a secure artmob configuration with a single mouse click.'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );

    $items[] = array(
      'path'  => 'profile/full_restore',
      'weight' => 5,
      'callback' => 'artmob_config_full_restore_profile',
      'callback arguments' => array(),
      'access' => TRUE
    );

    $items[] = array(
      'path'   => 'profile/partial_restore',
      'weight' => 5,
      'callback' => 'artmob_config_partial_restore_profile',
      'callback arguments' => array(),
      'access' => TRUE
    );

    $items[] = array(
      'path'   => 'profile/delete',
      'weight' => 5,
      'callback' => 'artmob_config_delete_profile',
      'callback arguments' => array(),
      'access' => TRUE
    );

  }

  return $items;
}

/**
 * Creates the artmob automatic configuration page
 * It is one big button and a short description of the button. What could be simpler?
 */
function artmob_config_form() {
  $form = array();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create and apply artmob defaults'),
    '#prefix' => t('This will create a new secure artmob configuration and apply the default.'),
    '#suffix' => '<br/>'. t('The following actions will be performed:') . theme('item_list', array(
      t('Create a default artmob configuration.'),
      t('apply the default artmob configuration.'),
    )),
  );

  $form['setting_name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Setting Name'),
    '#default_value' => variable_get('artmob_config_current_setting', 'current' ),
    '#description'   => t('enter the name to give the profile for the current settings'),
    '#tree'          => 'FALSE',
    '#required'      => True
  );

  $form['site_name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Site Name'),
    '#default_value' => variable_get('artmob_config_site_name', '' ),
    '#description'   => t('enter the name to give the site. Will be used to create the files directory.'),
    '#tree'          => 'FALSE',
    '#required'      => True
  );

  $form['save_settings'] = array(
    '#type' => 'submit',
    '#value' => t('Save Current Settings'),
    '#prefix' => t('This will save the current configuration.'),
  );

// enable this test button and add code to run certain tests
  $form['test_button'] = array(
    '#type' => 'submit',
    '#value' => t('Test Button'),
  );

  $header = array(t('Profile Name'), t('options'));
  $query = db_query( "SELECT * FROM {artmob_config}" );
  while ($item = db_fetch_object($query) ) {
    $row[] = array($item->name, "<h4>( ". l(t('clear and restore profile'), "profile/full_restore/". $item->name) ." ) ( ". l(t('restore profile only'), "profile/partial_restore/". $item->name) ." ) (". l(t("delete"), "profile/delete/". $item->name) ." )</h4>");
  }
  
  $form['profile_title'] = array(
    '#prefix' => '<p><p><h1>',
    '#value' => t('Profile Management'),
    '#suffix' => '</h1>',
  );

  $form['profile_table'] = array(
    '#prefix' => '<p><p><h2>',
    '#value' => theme('table', $header, $row),
    '#suffix' => '</h2>',
  );

  return $form;
}

/**
 * Sets the settings for an artmob profile
 * @param $profile Name of the artmob profile
 * @param $settings Array containing the new profile settings
 */
function artmob_config_set_profile_settings($profile, $settings) {
  db_query("DELETE FROM {artmob_config} WHERE name = '%s'", $profile);
  db_query("INSERT INTO {artmob_config} (name, settings) VALUES ('%s', '%s')", $profile, serialize($settings));
}

/**
 * Creates the artmob automatic configuration page
 * It is one big button and a short description of the button. What could be simpler?
 */
function artmob_config_form_submit($form_id, $form_values) {
  if ( $form_values['op'] == 'Create and apply artmob defaults' ) {
    //Fill settings array
    variable_set('artmob_config_site_name', $form_values['site_name'] );
    $settings = array();
    $settings = artmob_config_make_settings_array();

    //Save the settings for the artmob profile "default"
    artmob_config_set_profile_settings('default', $settings );

    //implement the default settings
    artmob_config_decode_config( $settings );
    drupal_set_message( 'The default profile has been set' );
    
  } 
  elseif ( $form_values['op'] == 'Test Button' ) {
    //store the current file path
    $before_dir_name  = variable_get('file_directory_path', '');
    $before_dir_temp = variable_get('file_directory_temp', '' );
    //variable_set('artmob_config_site_name', $form_values['site_name'] );
    //artmob_config_decode_site_name();
    
    //---------- NEW --------------------
    // TESTING THE IMPORT OF CCK FIELDS
    //drupal_set_message( 'before cck import' );
    //$filename = drupal_get_path('module', 'artmob_digitized_works') . "/cck_digitized_works_fields.txt";
    //drupal_set_message( '$filename = '.$filename );
    //$form_state = array();
    //$form_state['type_name'] = 'DigitizedWorks';
    //$form_state['macro'] = file_get_contents($filename);
    //drupal_set_message( 'macro = '.$form_state['macro'] );
    //content_copy_import_form_submit(null, $form_state);
    //---------- NEW --------------------


    //restore the current file path
    variable_set('file_directory_path', $before_dir_name);
    variable_set('file_directory_temp', $before_dir_temp);

    drupal_set_message( 'Test Button Pressed' );

    //$config = artmob_config_make_settings_array();
    //artmob_config_docode_views( $config );
  } 
  else {
    if (( $form_values['setting_name'] <> '' ) and ( $form_values['site_name'] <> '' ) ) {
      variable_set('artmob_config_site_name', $form_values['site_name'] );
      $settings = array();
      $settings = artmob_config_make_current_settings_array();
      //Save the settings for the artmob profile "default"
      artmob_config_set_profile_settings($form_values['setting_name'], $settings );
      drupal_set_message( 'The profile '. $form_values['setting_name'] .' has been set' );
    } 
    else {
      drupal_set_message( 'You must enter a setting name and a site name' );
    }
  }
}

function artmob_config_admin_settings() {
  $form['artmob_config_settings'] = array(
  '#type' => 'fieldset',
  '#title' => t('Configuration Settings'),
    '#weight' => -2
   );

/*
  $form['artmob_config_settings']['Convert'] = array(
    '#type'     => 'submit',
    '#value'     => t('convert all citation information'),
    '#submit'   => True,
    '#weight'   => 2
  );
*/
  return system_settings_form($form);
}

function artmob_config_admin_settings_submit($form_id, $form_values) {
  global $user;
/*
  if ( $form_values['op'] == 'convert all citation information' ) {
    convert_citations();
    drupal_set_message ( t('The information has been converted'));
  }
*/
}

/*
//******************
// ** HOOK INSERT **
//******************
function artmob_config_insert($node) {
  db_query("INSERT INTO {am_citation} (nid, copyright_date,link_nid,uid)
                               VALUES (%d, %d, %d, %d )",
       $node->nid,
       PCMain_DateToTimeStamp($node->copyright_date),
       $node->link_nid,
       $node->uid);

  //add node links
  artmob_config_save_contributor_links( $node );
}
*/

/*
//******************
// ** HOOK UPDATE **
//******************
function artmob_config_update($node) {
  db_query("UPDATE {am_citation} set
            copyright_date = %d,
            link_nid = %d,
            uid = %d
            where nid = %d",

            PCMain_DateToTimeStamp($node->copyright_date),
            $node->link_nid,
            $node->uid,
            $node->nid);

  //add node links
  artmob_config_save_contributor_links( $node );
}
*/

/*
//******************
// ** HOOK LOAD **
//******************
// Implementation of hook_load().
function artmob_config_load($node) {
  $t = db_fetch_object(db_query('SELECT * FROM {am_citation} WHERE nid = %d', $node->nid));

  for ( $counter = 1; $counter <= 5; $counter += 1) {
//          $sql = sprintf( "SELECT ToNode, LinkBlob FROM {PC_NodeLink} WHERE FromNode=%d AND ToType='%s' AND LinkIndex = %d",$node->nid,'Contributor', $counter );
    $oResult = db_query("SELECT ToNode, LinkBlob FROM {PC_NodeLink} WHERE FromNode=%d AND ToType='%s' AND LinkIndex = %d",$node->nid,'Contributor', $counter);
    while ($oRow = db_fetch_object($oResult)) {
      $temp = 'Contributor'.$counter;
      $t->$temp = $oRow->ToNode;
      $temp = 'ContributorRole'.$counter;
      $t->$temp = unserialize( $oRow->LinkBlob );
    }
  }

  return $t;
}
*/

/*
//******************
// ** HOOK DELETE **
//******************
function artmob_config_delete($node) {
  //First delete from the am_citation table
  //then delete from the PC_NodeLink table
  db_query("DELETE FROM {am_citation}
              where nid = %d",
             $node->nid);

  db_query("DELETE FROM {PC_NodeLink}
              where FromNode = %d",
             $node->nid);

}
*/

/*
// Implementation of hook_form().
function artmob_config_form(&$node) {
  $type = node_get_types('type', $node);
  $form['#node'] = $node;

  $form['citation'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Citation'),
    '#weight'        => -5,
    '#collapsible'   => TRUE,
    '#collapsed'     => FALSE
  );

  $form['citation']['title'] = array(
    '#type'          => 'textfield',
    '#title'         => t('title'),
    '#default_value' => $node->title,
    '#description'   => t('enter the title'),
    '#tree'          => 'FALSE',
    '#rows'          => 1,
    '#required'      => True
  );

  $form['citation']['body'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Description'),
    '#default_value' => $node->body,
    '#description'   => t('enter the description'),
    '#tree'          => 'FALSE',
    '#rows'          => 3,
    '#required'      => True
  );
  $form['DigitizedWorks']['format'] = filter_form($node->format);

  
  $form = artmob_config_get_artmob_config_form ( &$form, $node );
  return $form;
}
*/

/*
//--------------------------------------------------------------------
//This hook is used to add form fields to the forms
//of other module's add node screens.  The fields
//are defined here just as they were in the hook_form hook.
function artmob_config_form_alter($form_id, &$form) {
  // boilerplate code to determine the node type of the form
  if (isset($form['type'])) {
      $type = $form['type']['#value'];
    }
  elseif (isset($form['orig_type'])) {
      $type = $form['orig_type']['#value'];
    }
  else {
    return;
  }

  //This condition will allow the rdoContributor radio
  //button to be defaulted to on for new modules.  Therefore,
  //whenever a new module/NodeType is added to the project
  //it will automatically be turned on and have the ability
  //to have contributors
  if (($form['#node_type']->type == 'citation') || ($type == 'citation')) {
    $enabled = 1;
     variable_set('rdo_artmob_config_'.$type, 1 );
  }
  else{
    $enabled = variable_get('rdo_artmob_config_'. $type, 0);
  }

  switch ($form_id) {
    // Form addition to all Enabled node types.  A node is enabled using
    // rdo_artmob_config_ radio button that we added to the content types page
    // in the node_type_form below.
    case $type .'_node_form':
      if (($enabled)) {
        $form = artmob_config_get_artmob_config_form( $form, $form['#node'] );
      }
      break;
     case 'node_type_form':
      if ($form['#node_type']->type != 'citation') {
        $form['workflow']['rdo_citation'] = array(
          '#type' => 'radios',
          '#title' => t('Attach Citations'),
          '#default_value' => $enabled,
          '#options' => array(0 => t('Disabled'), 1 => t('Enabled')),
          '#description' => t('Should this node allow users to attach citations?'),
          );
      }
      break;
  }
}
*/


/**
 * Implementation of hook_nodeapi().
 *
*/
function artmob_config_nodeapi(&$node, $op, $teaser=NULL, $page=NULL) {
  switch ($op) {
       case 'update':
      $bupdate = TRUE;
      

      //Fall through, with flag.  Therefore with every update we delete
      //the old associated records and then resave the new ones

    case 'delete':
      if (!$bupdate) {
        break;
      }

    case 'insert':
      break;
    case 'load':
      //$aLoad['test_config'] = artmob_config_make_settings_array();
      //return $aLoad;
      break;
    case 'prepare':
      break;
    case 'view':
     break;
    case 'delete revision':
      break;
    case 'submit':

      break;
  }
}

//----------------------------------------------
function artmob_config_user($op, &$edit, &$currentuser) {
  global $user;
  switch ($op) {
    case 'load':
    case 'view':
    case 'form':
  };
}

function artmob_config_make_settings_array() {
  $result = array();
  //BUILD ROLES
  $roles = array();
  $roles = explode(',', 'admin,curator,Researcher' );
  $result['roles'] = $roles;
  
  //BUILD PERMISSIONS
  $permissions = array();
  $permissions['admin'] = explode(',', 'Add Article,Edit Article,Remove Article,
                                       View Article, Add Contributor,Edit Contributor,
                                       Remove Contributor,View Contributor,
                                       Add DigitizedWork,Delete DigitizedWork,
                                       Edit DigitizedWork,View DigitizedWork,
                                       Add Exhibit,Edit Exhibit,Remove Exhibit,
                                       View Exhibit,Add PC Lookup, Edit PC Lookup,
                                       Remove PC Lookup, View PC Lookup, Delete Configuration,
                                       Load Configuration, Save Configuration,
                                       administer audio, create audio, download audio,
                                       edit own audio, play audio, view download stats,
                                       administer blocks, Add Citation,
                                       Delete Citation,Edit Citation, View Citation,
                                       administer copyright, administer filters,
                                       create images, edit images, edit own images,
                                       view original images, administer images,
                                       import images, administer menu,access content,
                                       administer content types, administer nodes,
                                       create news content, create page content,
                                       edit news content, edit own page content,
                                       edit page content, revert revisions, view revisions,
                                       administer url aliases, create url aliases,
                                       administer pathauto,administer search,
                                       search content, use advanced search,
                                       access administration pages,
                                       administer site configuration,
                                       select different theme,administer taxonomy,
                                       administer taxonomy blocks, upload files,
                                       view uploaded files, access user profiles,
                                       administer access control, administer users,
                                       change own username, access video,
                                       administer video, create video, download video,
                                       edit own video, play video, view download counter,
                                       view play counter, upload video files,
                                       access all views, administer views bookmark,
                                       administer views, administer weblinks,
                                       create weblinks, edit group categories,
                                       edit group weblinks, edit own weblinks' );

  $permissions['curator'] = explode(',', 'Add Article,Edit Article,Remove Article,
                                         Add Contributor,Edit Contributor,
                                         Remove Contributor,Add DigitizedWork,
                                         Edit DigitizedWork,Add Exhibit,
                                         Edit Exhibit,Remove Exhibit,Add Citation,
                                         Delete Citation,Edit Citation,create images,
                                         create news content,create video,create weblinks,
                                         edit own weblinks');
                                         
  $permissions['authenticated user' ] = explode(',', 'View Article,View Contributor,
                                        View DigitizedWork, View Exhibit, View PC Lookup,
                                        download audio, play audio, view download stats,
                                        View Citation, access comments, post comments,
                                        post comments without approval,
                                        access site-wide contact form,
                                        access content,search content, use advanced search,
                                        upload files, view uploaded files,
                                        access user profiles, access video,
                                        play video' );
                                        
                                        
  $permissions['anonymous user' ] = explode(',', 'View Article, View Contributor,
                                    View DigitizedWork, View Exhibit, View PC Lookup,
                                    download audio, play audio, view download stats,
                                    View Citation, access site-wide contact form,
                                    access content, search content,
                                    view uploaded files, access video,
                                    play video' );

  $result['permissions'] = $permissions;

  //BUILD VOCABULARY
  $vocabulary = array();
  
  // -- BUILD FOLKSONOMY VOCAB
  $vocab_object_folksonomy->name = 'Folksonomy';
  $vocab_object_folksonomy->description = '';
  $vocab_object_folksonomy->tags = 1;
  $vocab_object_folksonomy->multiple = 0;
  $vocab_object_folksonomy->required = 0;
  $vocab_object_folksonomy->hierarchy = 0;
  $vocab_object_folksonomy->weight = 0;
  $vocab_object_folksonomy->module = '';
  $types = array();
  $types = explode(',', 'Articles,audio,DigitizedWorks,
                         Exhibit,amPicture,news,page,video,weblinks');
  $vocab_object_folksonomy->types = $types;
  // -- -- BUILD TERMS
  $terms = array();
  $vocab_object_folksonomy->terms = $terms;
  $vocabulary[] = $vocab_object_folksonomy;
  
  // -- BUILD RELATED TERMS VOCAB
  $vocab_object_related_terms->name = 'Related Terms';
  $vocab_object_related_terms->description = 'Correspondences in this category will appear in the Related Terms block below the content.';
  $vocab_object_related_terms->tags = 1;
  $vocab_object_related_terms->multiple = 0;
  $vocab_object_related_terms->required = 0;
  $vocab_object_related_terms->hierarchy = 0;
  $vocab_object_related_terms->weight = 0;
  $vocab_object_related_terms->module = '';
  $vocab_object_related_terms->module = '';
  $types = array();
  $types = explode(',', 'Articles,audio,blog,Contributor,
                         DigitizedWorks,Exhibit,amPicture,news,page,
                         video,weblinks');
  $vocab_object_related_terms->types = $types;
  // -- -- BUILD TERMS
  $terms = array();
  $vocab_object_related_terms->terms = $terms;
  $vocabulary[] = $vocab_object_related_terms;

  // -- BUILD ARTICLE TYPE VOCAB
  $vocab_object_article_type->name = 'Article Type';
  $vocab_object_article_type->description = 'Articles, Reviews, etc.';
  $vocab_object_article_type->tags = 0;
  $vocab_object_article_type->multiple = 1;
  $vocab_object_article_type->required = 0;
  $vocab_object_article_type->hierarchy = 0;
  $vocab_object_article_type->weight = -5;
  $vocab_object_article_type->module = '';
  $types = array();
  $types = explode(',', 'Articles');

  $vocab_object_article_type->types = $types;
  // -- -- BUILD TERMS
  $terms = array();
  // -- -- -- BUILD TERM 1
  $term_object_term1->name = 'Article';
  $term_object_term1->weight = 0;
  $terms[] = $term_object_term1;

  // -- -- -- BUILD TERM 2
  $term_object_term2->name = 'Review';
  $term_object_term2->weight = 2;
  $terms[] = $term_object_term2;

  $vocab_object_article_type->terms = $terms;
  $vocabulary[] = $vocab_object_article_type;

  // -- BUILD TYPE VOCAB
  $vocab_object_type->name = 'Type';
  $vocab_object_type->description = '';
  $vocab_object_type->tags = 0;
  $vocab_object_type->multiple = 0;
  $vocab_object_type->required = 0;
  $vocab_object_type->hierarchy = 0;
  $vocab_object_type->weight = 0;
  $vocab_object_type->module = '';
  $types = explode(',', 'DigitizedWorks,image,page');
  $vocab_object_type->types = $types;
  // -- -- BUILD TERMS
  $terms = array();
  // -- -- -- BUILD TERM 1
  $term_object_term1->name = 'Ephemera';
  $term_object_term1->weight = 0;
  $terms[] = $term_object_term1;
  $vocab_object_type->terms = $terms;
  $vocabulary[] = $vocab_object_type;
  
  // -- BUILD ARTICLE ALTERNATE PAGE TITLE VOCAB
  $vocab_object_alternate_page_title->name = 'Alternate Page Title';
  $vocab_object_alternate_page_title->description = 'A category-based flag to select alternate page title treatment.';
  $vocab_object_alternate_page_title->tags = 0;
  $vocab_object_alternate_page_title->multiple = 0;
  $vocab_object_alternate_page_title->required = 0;
  $vocab_object_alternate_page_title->hierarchy = 0;
  $vocab_object_alternate_page_title->weight = -5;
  $vocab_object_alternate_page_title->module = '';
  $types = array();
  $types = explode(',', 'Articles,audio,blog,
                         Contributor,DigitizedWorks,Exhibit,amPicture,
                         news,page,video,weblinks');
  $vocab_object_alternate_page_title->types = $types;
  // -- -- BUILD TERMS
  $terms = array();
  // -- -- -- BUILD TERM 1
  $term_object_term1->name = 'No';
  $term_object_term1->weight = -1;
  $terms[] = $term_object_term1;

  // -- -- -- BUILD TERM 2
  $term_object_term2->name = 'Yes';
  $term_object_term2->weight = 2;
  $terms[] = $term_object_term2;

  $vocab_object_alternate_page_title->terms = $terms;
  $vocabulary[] = $vocab_object_alternate_page_title;
  
  // -- BUILD EXHIBITS VOCAB
  $vocab_object_exhibits->name = 'Exhibits';
  $vocab_object_exhibits->description = '';
  $vocab_object_exhibits->tags = 0;
  $vocab_object_exhibits->multiple = 1;
  $vocab_object_exhibits->required = 0;
  $vocab_object_exhibits->hierarchy = 0;
  $vocab_object_exhibits->weight = 0;
  $vocab_object_exhibits->module = '';
  $types = array();
  $types = explode(',', 'Articles,audio,blog,
                         DigitizedWorks,amPicture,
                         video,weblinks');
  $vocab_object_exhibits->types = $types;
  // -- -- BUILD TERMS
  $terms = array();

  $vocab_object_exhibits->terms = $terms;
  $vocabulary[] = $vocab_object_exhibits;

  $result['vocabulary'] = $vocabulary;

  // -- BUILD NODE TYPE
  $node_type = array();
  // -- -- NODE TYPE - IMAGE
  $type_object_image->name = 'Thumbnail';
  $type_object_image->description = 'Adds a thumbnail image, used to illustrate other content.  This should not be confused with "Add Picture", which adds an image to your Artmob archive.';
  $type_object_image->module = 'image';
  $node_type['image'] = $type_object_image;
  
  $type_object_audio->name = 'Audio';
  $type_object_audio->description = 'Add audio files and podcasts to your Artmob archive';
  $type_object_audio->module = 'audio';
  $node_type['audio'] = $type_object_audio;


  $result['node_type'] = $node_type;

  // -- BUILD VARIABLES
  $variables = array();

  //Group1 - entire list with image body size = IMAGE_THUMBNAIL
  $variable_node_types = array();
  $variable_node_types = explode( ',', 'Articles,audio,Contributor,weblinks,DigitizedWorks,Exhibit,news,video,amPicture,page' );
  foreach ( $variable_node_types as $var_node_type ) {
    $variable_name = 'image_attach_'. $var_node_type;
    $variables[ $variable_name ] = variable_get($variable_name, 0 );

    $variable_name = 'image_attach_size_teaser_'. $var_node_type;
    $variables[ $variable_name ] = variable_get($variable_name, IMAGE_THUMBNAIL );

    $variable_name = 'image_attach_weight_teaser_'. $var_node_type;
    $variables[ $variable_name ] = variable_get($variable_name, 0 );

    $variable_name = 'image_attach_size_body_'. $var_node_type;
    $variables[ $variable_name ] = variable_get($variable_name, IMAGE_THUMBNAIL );

    $variable_name = 'image_attach_weight_body_'. $var_node_type;
    $variables[ $variable_name ] = variable_get($variable_name, 0 );
  }

  //Group2 - image body size = IMAGE_PREVIEW
  $variable_node_types = array();
  $variable_node_types = explode( ',', 'DigitizedWorks,Exhibit,news,video' );

  foreach ( $variable_node_types as $var_node_type ) {
    $variable_name = 'image_attach_size_body_'. $var_node_type;
    $variables[ $variable_name ] = variable_get($variable_name, IMAGE_PREVIEW );
  }


  //Group3 - image body size = IMAGE_ATTACH_HIDDEN
  $variable_node_types = array();
  $variable_node_types = explode( ',', 'amPicture,page' );

  foreach ( $variable_node_types as $var_node_type ) {
    $variable_name = 'image_attach_size_body_'. $var_node_type;
    $variables[ $variable_name ] = variable_get($variable_name, IMAGE_ATTACH_HIDDEN );
  }
  
  //LASTLY, THE PAGE HAS AN IMAGE ATTACHE TEASER AS IMAGE_ATTACH_HIDDEN
  $variable_name = 'image_attach_size_teaser_page';
  $variables[ $variable_name ] = variable_get($variable_name, IMAGE_ATTACH_HIDDEN );

  $variable_node_types = array();
  $variable_node_types = explode( ',', 'Articles,audio,DigitizedWorks,Exhibit,image,amPicture,video,license' );
  foreach ( $variable_node_types as $var_node_type ) {
    $variable_name = 'image_attach_size_body_'. $var_node_type;
    $variables[ $variable_name ] = variable_get($variable_name, IMAGE_ATTACH_HIDDEN );
  }
  
  //Articles
  $variables['rdolicense_Articles'] = 1;
  $variables['rdoCopyright_Articles'] = 1;
  $variables['rdoContributor_Articles'] = 1;
  $variables['am_copyrightholder_Articles'] = 1;
  $variables['comment_Articles'] = 0;
  $variables['image_attach_Articles'] = 1;
  $variables['image_attach_size_teaser_Articles'] = 0; //!!!must add results browser width here
  $variables['image_attach_size_body_Articles']= IMAGE_THUMBNAIL;
  $variables['image_attach_weight_body_Articles'] = -10;
  
  //Audio
  $variables['IsBrowseView_audio'] = 1;
  $variables['display_artmob_summary_audio'] = 1; //vertical
  $variables['rdolicense_audio'] = 1;
  $variables['rdo_citation_audio'] = 1;
  $variables['rdoCopyright_audio'] = 1;
  $variables['rdoContributor_audio'] = 1;
  $variables['am_copyrightholder_audio'] = 1;
  $variables['comment_audio'] = 0;
  $variables['image_attach_audio'] = 1;
  $variables['image_attach_size_teaser_audio'] = 0; //!!!must add results browser width here
  $variables['image_attach_size_body_audio']= IMAGE_ATTACH_HIDDEN;
  $variables['image_attach_weight_body_audio'] = -10;
  
  //Digitized Works
  $variables['IsBrowseView_DigitizedWorks'] = 1;
  $variables['display_artmob_summary_DigitizedWorks'] = 1; //vertical
  $variables['rdolicense_DigitizedWorks'] = 1;
  $variables['rdo_citation_DigitizedWorks'] = 1;
  $variables['rdoCopyright_DigitizedWorks'] = 1;
  $variables['rdoContributor_DigitizedWorks'] = 1;
  $variables['am_copyrightholder_DigitizedWorks'] = 1;
  $variables['comment_DigitizedWorks'] = 0;
  $variables['image_attach_DigitizedWorks'] = 1;
  $variables['image_attach_size_teaser_DigitizedWorks'] = 0; //!!!must add results browser width here
  $variables['image_attach_size_body_DigitizedWorks']= IMAGE_ATTACH_HIDDEN;
  $variables['image_attach_weight_body_DigitizedWorks'] = -10;

  //Exhibit
  $variables['comment_Exhibit'] = 0;
  $variables['image_attach_Exhibit'] = 1;
  $variables['image_attach_size_teaser_Exhibit'] = 0; //!!!must add results browser width here
  $variables['image_attach_size_body_Exhibit']= IMAGE_THUMBNAIL;
  $variables['image_attach_weight_body_Exhibit'] = -10;

  //Image
  $variables['comment_image'] = 0;


  //Picture
  $variables['IsBrowseView_amPicture'] = 1;
  $variables['display_artmob_summary_amPicture'] = 2; //horizontal
  $variables['comment_amPicture'] = 0;
  $variables['rdo_citation_amPicture'] = 1;
  $variables['rdoCopyright_amPicture'] = 1;
  $variables['rdoContributor_amPicture'] = 1;
  $variables['am_copyrightholder_amPicture'] = 1;

  //Video
  $variables['IsBrowseView_video'] = 1;
  $variables['display_artmob_summary_video'] = 2; //horizontal
  $variables['rdolicense_video'] = 1;
  $variables['rdo_citation_video'] = 1;
  $variables['rdoCopyright_video'] = 1;
  $variables['rdoContributor_video'] = 1;
  $variables['am_copyrightholder_video'] = 1;
  $variables['comment_video'] = 0;
  $variables['image_attach_video'] = 1;
  $variables['image_attach_size_teaser_video'] = 0; //!!!must add results browser width here
  $variables['image_attach_size_body_video']= IMAGE_ATTACH_HIDDEN;
  $variables['image_attach_weight_body_video'] = -10;

  //License
  $variables['image_attach_license'] = 1;
  $variables['image_attach_size_teaser_license'] = 0; //!!!must add results browser width here
  $variables['image_attach_size_body_license']= IMAGE_ATTACH_HIDDEN;
  $variables['image_attach_weight_body_license'] = -10;
  
  //Path Auto settings
  $variables['pathauto_node_pattern'] = '[title-raw]';
  $variables['pathauto_node_blog_pattern'] = 'blog/[title-raw]';
  $variables['pathauto_node_audio_pattern'] = 'media/audio/[title-raw]';
  $variables['pathauto_node_amPicture_pattern'] = 'media/images/[title-raw]';
  $variables['pathauto_node_video_pattern'] = 'media/video/[title-raw]';
  $variables['pathauto_node_articles_pattern'] = 'articles/[title-raw]';
  $variables['pathauto_node_links_pattern'] = 'links/[title-raw]';
  $variables['pathauto_node_DigitizedWorks_pattern'] = 'media/digitized_works/[title-raw]';
  $variables['pathauto_node_news_pattern'] = 'news/[title-raw]';
  $variables['pathauto_node_Contributor_pattern'] = 'contributors/[title-raw]';
  $variables['pathauto_node_Exhibit_pattern'] = 'exhibits/[title-raw]';
  $variables['pathauto_node_license_pattern'] = 'license/[title-raw]';
  $variables['pathauto_node_amlicensing_ticket_pattern'] = 'tickets/licensing/[title-raw]';
  $variables['pathauto_node_am_usage_request_ticket_pattern'] = 'tickets/usage_request/[title-raw]';
  $variables['pathauto_node_amcitation_ticket_pattern'] = 'tickets/citation/[title-raw]';
  $variables['pathauto_node_image_pattern'] = 'thumbnails/[title-raw]';
  
  //site settings
  $variables['user_register'] = 2; //users need admin verification

  $image_sizes = array();
  $image_sizes['Thumbnail']['label'] = 'Thumbnail';
  $image_sizes['Thumbnail']['width'] = '130';
  $image_sizes['Thumbnail']['height'] = '10000';
  $image_sizes['Thumbnail']['link'] = 1;
  $image_sizes['Preview']['label'] = 'Preview';
  $image_sizes['Preview']['width'] = '180';
  $image_sizes['Preview']['height'] = '10000';
  $image_sizes['Preview']['link'] = 1;
  $image_sizes['Results Browser Width']['label'] = 'Results Browser Width';
  $image_sizes['Results Browser Width']['width'] = '250';
  $image_sizes['Results Browser Width']['height'] = '10000';
  $image_sizes['Results Browser Width']['link'] = 1;
  $image_sizes['Large']['label'] = 'Large';
  $image_sizes['Large']['width'] = '550';
  $image_sizes['Large']['height'] = '10000';
  $image_sizes['Large']['link'] = 1;
  $image_sizes['XLarge']['label'] = 'XLarge';
  $image_sizes['XLarge']['width'] = '800';
  $image_sizes['XLarge']['height'] = '10000';
  $image_sizes['XLarge']['link'] = 1;
  
  $variables['image_sizes'] = $image_sizes;

  //site name variable
  $variables['artmob_config_site_name'] = variable_get('artmob_config_site_name', '');;

  $result['variables'] = $variables;
  
  
  // -- BUILD BLACKOUT LIST
  $blackout_list = array();
  $blackout_list['audio'] = array( 'audio_file' => 1 );
  $blackout_list['DigitizedWorks'] = array( 'attachments' => 1 );
  $blackout_list['amPicture'] = array( 'picture' => 1 );
  $blackout_list['video'] = array( 'video_file' => 1 );
  $result['blackout_list'] = $blackout_list;

  //BUILD IMAGECACHE SECTION
  if (module_exists('imagecache')) {
    $imagecache = array();
    $preset_object_thumbnail->presetname = 'Thumbnail';
    $preset_object_thumbnail->weight = -10;
    $preset_object_thumbnail->action = 'imagecache_scale';
    $preset_object_thumbnail->width = 130;
    $preset_object_thumbnail->height = 0;
    $preset_object_thumbnail->upscale = 0;
    $imagecache[] = $preset_object_thumbnail;

    $preset_object_preview->presetname = 'Preview';
    $preset_object_preview->weight = -10;
    $preset_object_preview->action = 'imagecache_scale';
    $preset_object_preview->width = 180;
    $preset_object_preview->height = 0;
    $preset_object_preview->upscale = 0;
    $imagecache[] = $preset_object_preview;

    $preset_object_results_browser_width->presetname = 'Results Browser Width';
    $preset_object_results_browser_width->weight = -10;
    $preset_object_results_browser_width->action = 'imagecache_scale';
    $preset_object_results_browser_width->width = 250;
    $preset_object_results_browser_width->height = 0;
    $preset_object_results_browser_width->upscale = 1;
    $imagecache[] = $preset_object_results_browser_width;

    $preset_object_large->presetname = 'Large';
    $preset_object_large->weight = -10;
    $preset_object_large->action = 'imagecache_scale';
    $preset_object_large->width = 550;
    $preset_object_large->height = 0;
    $preset_object_large->upscale = 1;
    $imagecache[] = $preset_object_large;

    $preset_object_xlarge->presetname = 'XLarge';
    $preset_object_xlarge->weight = -10;
    $preset_object_xlarge->action = 'imagecache_scale';
    $preset_object_xlarge->width = 880;
    $preset_object_xlarge->height = 0;
    $preset_object_xlarge->upscale = 1;
    $imagecache[] = $preset_object_xlarge;

    $result['imagecache'] = $imagecache;
  }

  //BUILD VIEWS SECTION
  if (module_exists('views')) {
    $views_array = array();
    $views_array['contributors_list'] = artmob_config_make_view_contributor_list();
    $views_array['articles_list'] = artmob_config_make_view_articles_list();
    $views_array['audio_page'] = artmob_config_make_view_audio_page();
    $views_array['digitized_works_page'] = artmob_config_make_view_digitized_works_page();
    $views_array['pictures_page'] = artmob_config_make_view_pictures_page();
    $views_array['video_page'] = artmob_config_make_view_video_page();
    $views_array['exhibit_by_category'] = artmob_config_make_view_exhibit_by_category_page();
    $views_array['exhibit_by_category_name'] = artmob_config_make_view_exhibit_by_category_name_page();
    $views_array['exhibit_block'] = artmob_config_make_view_exhibit_block();
    $views_array['front_page_block'] = artmob_config_make_view_front_page_block();
    $views_array['links_block'] = artmob_config_make_view_links_block();
    $views_array['news_page'] = artmob_config_make_view_news_page();
    $views_array['recent_news_block'] = artmob_config_make_view_recent_news_block();
    $views_array['taxonomy_term_page'] = artmob_config_make_view_taxonomy_term_page();
    $views_array['browse_all_content_ajax'] = artmob_config_make_view_browse_all_content_ajax();

    //$view_object = views_get_view('Exhibit_by_category_name');
    //print_r( $view_object );
    $result['views'] = $views_array;
  }
  return $result;
}

function artmob_config_decode_config( $config = array() ) {
  artmob_config_decode_roles( $config );
  drupal_set_message( t('Roles configuration is complete') );
  artmob_config_decode_permissions( $config );
  drupal_set_message( t('Permissions configuration is complete') );
  artmob_config_decode_vocabulary( $config );
  drupal_set_message( t('Vocabulary configuration is complete') );
  artmob_config_decode_node_type( $config );
  drupal_set_message( t('Node Type configuration is complete') );
  artmob_config_decode_variables( $config );
  drupal_set_message( t('Variables configuration is complete') );
  //This must be done after variables because it uses the
  //artmob_config_site_name variable to set the file system config
  //and make the proper files directory
  artmob_config_decode_site_name( );
  drupal_set_message( t('Site Name configuration is complete') );
  artmob_config_decode_blackout( $config );
  drupal_set_message( t('Blackout List configuration is complete') );
  artmob_config_decode_imagecache( $config );
  drupal_set_message( t('Imagecache configuration is complete') );
  artmob_config_docode_views( $config );
  drupal_set_message( t('views configuration is complete') );
  artmob_config_decode_cck_fields();
  drupal_set_message( t('cck fields configuration is complete') );
}

function artmob_config_decode_roles( $config = array() ) {
  $roles = array();
  $roles = $config['roles'];
  foreach ( $roles  as $role ) {
    artmob_config_check_create_role( $role );
  }
}

function artmob_config_check_create_role( $role ) {
  $rid = artmob_config_get_rid( $role );
  if ( !$rid ) {
   //create role
   $t = db_fetch_object(db_query('SELECT max(rid) as maxrid from {role}'));
   $rid = $t->rid + 1;
   db_query("INSERT INTO {role} (name) VALUES ('%s')", $role);
  }
  return $rid;
}

function artmob_config_get_rid( $role ) {
  $result = db_query( "SELECT * FROM {role} WHERE name = '%s' ", $role );
  if ( db_num_rows( $result )) {
    $row = db_fetch_object( $result );
    return $row->rid;
  } 
  else {
    return 0;
  }
}

function artmob_config_decode_permissions( $config = array() ) {
  $permissions = array();
  $value = array();
  $config_perm = $config['permissions'];
  foreach ( $config_perm as $role => $value ) {
    $rid = artmob_config_check_create_role( $role );
    foreach ( $value as $permission_name ) {
      artmob_config_ensure_role_permission($rid, trim($permission_name) );
    }
  }
}

/**
 * Ensures that a role has a permission.
 * @param $rid ID of the role
 * @param $perm Permission to ensure the role has
 */
function artmob_config_ensure_role_permission($rid, $perm) {
  $result = db_query('SELECT perm FROM {permission} WHERE rid = %d', $rid);
  if ($row = db_fetch_object($result)) {
    $permissions = explode(', ', $row->perm);
  }
  else {
    $permissions = array();
  }
  if (array_search($perm, $permissions) === FALSE) {
    $permissions[] = $perm;
    db_query('DELETE FROM {permission} WHERE rid = %d', $rid);
    db_query("INSERT INTO {permission} (rid, perm) VALUES (%d, '%s')", $rid, implode(', ', $permissions));
  }
}

function artmob_config_decode_vocabulary( $config = array() ) {
  $is_insert = TRUE;
  $vocabulary_element = $config['vocabulary'];
  foreach ( $vocabulary_element as $vocab_object) {
    $vid = pcmain_taxonomy_get_vocabulary_by_name( $vocab_object->name );
    $vocabulary = array(
      'name' => $vocab_object->name,
      'description' => $vocab_object->description,
      'multiple' => $vocab_object->multiple,
      'required' => $vocab_object->required,
      'hierarchy' => $vocab_object->hierarchy,
      'module' => $vocab_object->module,
      'tags' => $vocab_object->tags,
      'weight' => $vocab_object->weight,
     );
    if ($vid) {
      $vocabulary['vid'] = $vid;
      $is_insert = FALSE;
    }
//        'nodes' => array('artmob_config' => 1 )
//        'module' => 'artmob_config',
    taxonomy_save_vocabulary($vocabulary);
    $vid = $vocabulary['vid'];
     $types = array();
     $types = $vocab_object->types;
    foreach ($types as $type_name ) {
      //This only adds the type if it does not exist
       pcmain_taxonomy_add_type_to_vocabulary( $vid, $type_name );
    }
      
    $terms = array();
    $terms = $vocab_object->terms;

    foreach ( $terms as $term_object ) {
      //This only adds the term if it does not exist, otherwise it will update
      pcmain_taxonomy_add_term_to_vocabulary_by_name( $vocab_object->name, '', $term_object->name, $term_object->description, $vid, $term_object->weight );
    }
  }
}

function artmob_config_decode_node_type( $config = array() ) {
  $node_type = array();
  $node_type = $config['node_type'];
  foreach ( $node_type as $type => $value ) {
    $result = db_query( "SELECT * FROM {node_type}
               WHERE type = '%s'", $type);
    if ( db_num_rows( $result ) ) {
      db_query( "UPDATE {node_type} SET name = '%s',
               description = '%s',
               module = '%s',
               help = '%s',
               has_title = %d,
               title_label = '%s',
               has_body = %d,
               body_label = '%s',
               min_word_count = %d,
               custom = %d,
               modified = %d,
               locked = %d,
               orig_type = '%s'
               WHERE type = '%s'",
               $value->name, $value->description, $value->module,
               $value->help, $value->has_title, $value->title_label,
               $value->has_body, $value->body_label, $value->min_word_count,
               $value->custom, $value->modified, $value->locked,
               $value->orig_type,
               $type );
    } 
    else {
      db_query( "INSERT INTO {node_type} SET name = '%s',
               description = '%s',
               module = '%s',
               help = '%s',
               has_title = %d,
               title_label = '%s',
               has_body = %d,
               body_label = '%s',
               min_word_count = %d,
               custom = %d,
               modified = %d,
               locked = %d,
               orig_type = '%s',
               type = '%s'",
               $value->name, $value->description, $value->module,
               $value->help, $value->has_title, $value->title_label,
               $value->has_body, $value->body_label, $value->min_word_count,
               $value->custom, $value->modified, $value->locked,
               $value->orig_type,
               $type );
    }
  }
}

function artmob_config_decode_variables( $config ) {
  $variables = array();
  $variables = $config['variables'];
  foreach ( $variables as $variable => $value ) {
    variable_set( $variable, $value );
  }
}

function artmob_config_decode_site_name( ) {
  $site_name = variable_get( 'artmob_config_site_name', '' );
  if ($site_name <> '' ) {
    //Set the path names and the config variables
    $file_directory_path = 'files/'. $site_name;
    $file_directory_temp = $file_directory_path .'/temp';
    variable_set('file_directory_path', $file_directory_path);
    variable_set('file_directory_temp', $file_directory_temp);
    
    //now make the directories
    artmob_config_make_directory($file_directory_path );
    //drupal_set_message( 'file directory = '.$file_directory_path );
    artmob_config_make_directory($file_directory_path .'/video_import' );
    //drupal_set_message( 'video import file directory = '.$file_directory_path.'/video_import' );
    artmob_config_make_directory($file_directory_path .'/images' );
    //drupal_set_message( 'images file directory = '.$file_directory_path.'/images' );
    artmob_config_make_directory($file_directory_path .'/video' );
    //drupal_set_message( 'video file directory = '.$file_directory_path.'/video' );
    artmob_config_make_directory($file_directory_path .'/temp' );
    //drupal_set_message( 'temp file directory = '.$file_directory_path.'/temp' );
  }
}

function artmob_config_make_directory( $directory ) {
  if (!is_dir($directory)) {
    mkdir($directory);
  }
}

function artmob_config_decode_blackout( $config ) {
  $blackout_list = array();
  $blackout_list = $config['blackout_list'];
  foreach ( $blackout_list as $type => $field_array ) {
    foreach ( $field_array as $field_name => $value ) {
      $field_found = db_result( db_query( "SELECT COUNT( * ) FROM {am_blackout_list}
                           where type = '%s' and field = '%s'" ));
                           
      if ( $field_found ) {
        db_query( "update {am_blackout_list} set blackout_mode = %d
                   where type = '%s' and field = '%s'", $value, $type, $field_name );
      } 
      else {
        db_query( "insert into {am_blackout_list} set blackout_mode = %d,
                   type = '%s', field = '%s'", $value, $type, $field_name );
      }
    }
  }
}

function artmob_config_decode_imagecache( $config ) {
  if ( module_exists( 'imagecache' ) ) {
    $imagecache = array();
    $imagecache = $config['imagecache'];
    foreach ( $imagecache as $imagecache_object ) {
      $preset_array = imagecache_preset_by_name( $imagecache_object->presetname );
      if ( count($preset_array) > 0 ) {
        foreach ( $preset_array as $preset_object ) {
          $preset_input_array['presetname'] = $imagecache_object->presetname;
          $preset_input_array['presetid'] = $preset_object->presetid;
          break;
        }
      } 
      else {
        $preset_input_array['presetname'] = $imagecache_object->presetname;
      }
      $preset_input_array = imagecache_preset_save( $preset_input_array );
      $action = array();
      $action['presetid'] = $preset_input_array['presetid'];
      $action['weight'] =
      $data_array = array();
      $data_array['height'] = $imagecache_object->height;
      $data_array['width'] = $imagecache_object->width;
      $data_array['upscale'] = $imagecache_object->upscale;
      $action['data'] = $data_array;
      imagecache_action_save( $action );
    }
  }
}

function artmob_config_docode_views( $config ) {
  if ( module_exists( 'views' ) ) {
    $views_array = array();
    $views_array = $config['views'];
    foreach ( $views_array as $name => $view_object ) {
      $sql = sprintf( "select vid from {view_view} where name = '%s'", $view_object->name );
      //drupal_set_message( '$sql = '.$sql );
      $result = db_query( "select vid from {view_view} where name = '%s'", $view_object->name );
      while ($item = db_fetch_object($result) ) {
  $vid = $item->vid;
      }
      $view_object->vid = $vid;
      //print_r( $view_object );
      _views_save_view( $view_object );
    }
    //Clear the views cache and rebuild the menu
    //taken from views_ui.module
    views_invalidate_cache();
    menu_rebuild();
  }
}

function artmob_config_decode_cck_fields() {
  //NOTE: This function does not actually decode the cck fields
  //but just adds them all every time.
  //This array holds the node type as the key and it's file name as it's value
  $cck_type_array = array();
  $cck_type_array['Articles'] = drupal_get_path('module', 'artmob_articles') ."/artmob_articles_cck_fields.txt";
  //the audio file is one level below the artmob_video module
  $cck_type_array['audio'] = drupal_get_path('module', 'artmob_video') ."/../artmob_audio_cck_fields.txt";
  $cck_type_array['DigitizedWorks'] = drupal_get_path('module', 'artmob_digitized_works') ."/artmob_digitized_works_cck_fields.txt";
  $cck_type_array['Exhibit'] = drupal_get_path('module', 'artmob_exhibit') ."/artmob_exhibit_cck_fields.txt";
  $cck_type_array['amPicture'] = drupal_get_path('module', 'artmob_picture') ."/artmob_picture_cck_fields.txt";
  $cck_type_array['amVideo'] = drupal_get_path('module', 'artmob_video') ."/artmob_video_cck_fields.txt";
  $cck_type_array['amCopyright'] = drupal_get_path('module', 'artmob_copyright') ."/artmob_copyright_cck_fields.txt";
  
  foreach ( $cck_type_array as $key => $value ) {
    $form_state = array();
    $form_state['type_name'] = $key;
    $form_state['macro'] = file_get_contents( $value );
    content_copy_import_form_submit(null, $form_state);
  }
}


function artmob_config_make_current_settings_array() {
  $result = array();
  $role_array = array();

  //BUILD ROLES
  $query = db_query( "SELECT * FROM {role}" );
  while ($row = db_fetch_object($query)) {
    $role_array[] = $row->name;
  }
  $result['roles'] = $role_array;

  //BUILD PERMISSIONS
  $query = db_query( "SELECT r.name, p.perm FROM {permission} p
  INNER JOIN {role} r on p.rid = r.rid");
  $permissions = array();
  while ($row = db_fetch_object($query) ) {
    $permissions[$row->name] = explode(',', $row->perm);
  }
  $result['permissions'] = $permissions;

  //BUILD VOCABULARY
  $vocabulary = array();
  $query = db_query( "SELECT * FROM {vocabulary} ");
  while ($row = db_fetch_object($query) ) {
    $query_types_array = array();
    $query_types = db_query("SELECT * FROM {vocabulary_node_types} WHERE vid = %d", $row->vid);
    while ($row_types = db_fetch_object($query_types)) {
      $query_types_array[] = $row_types->type;
    }
    //$row->types = implode(',', $query_types_array);
    $row->types = $query_types_array;

    $query_terms_array = array();
    $query_term = db_query("SELECT * FROM {term_data} where vid = %d", $row->vid);
    $sql = sprintf("SELECT * FROM {term_data} where vid = %d", $row->vid );
    while ($row_term = db_fetch_object($query_term)) {
      $query_terms_array[] = $row_term;
    }
    $row->terms = $query_terms_array;
    $vocabulary[] = $row;
  }

  $result['vocabulary'] = $vocabulary;

  //BUILD NODE TYPE
  $node_type = array();
  $query = db_query( "SELECT * FROM {node_type} ");
  while ($row = db_fetch_object($query) ) {
    $node_type[$row->type] = $row;
  }
  $result['node_type'] = $node_type;
  
  //BUILD VARIABLES
  $variables = array();
  //reset the image attach variables to their default
  $query = db_query( "SELECT * FROM {node_type} ");
  while ($row = db_fetch_object($query) ) {
    $variable_name = 'image_attach_'. $row->type;
    $variables[ $variable_name ] = variable_get($variable_name, 0 );
    
    $variable_name = 'image_attach_size_teaser_'. $row->type;
    $variables[ $variable_name ] = variable_get($variable_name, IMAGE_THUMBNAIL );

    $variable_name = 'image_attach_weight_teaser_'. $row->type;
    $variables[ $variable_name ] = variable_get($variable_name, 0 );

    $variable_name = 'image_attach_size_body_'. $row->type;
    $variables[ $variable_name ] = variable_get($variable_name, IMAGE_THUMBNAIL );

    $variable_name = 'image_attach_weight_body_'. $row->type;
    $variables[ $variable_name ] = variable_get($variable_name, 0 );

    $variable_name = 'rdolicense_'. $row->type;
    $variables[ $variable_name ] = variable_get($variable_name, 0 );

    $variable_name = 'rdoCopyright_'. $row->type;
    $variables[ $variable_name ] = variable_get($variable_name, 0 );

    $variable_name = 'rdoContributor_'. $row->type;
    $variables[ $variable_name ] = variable_get($variable_name, 0 );

    $variable_name = 'am_copyrightholder_'. $row->type;
    $variables[ $variable_name ] = variable_get($variable_name, 0 );

    $variable_name = 'comment_'. $row->type;
    $variables[ $variable_name ] = variable_get($variable_name, 0 );

    $variable_name = 'IsBrowseView_'. $row->type;
    $variables[ $variable_name ] = variable_get($variable_name, 0 );

    $variable_name = 'display_artmob_summary_'. $row->type;
    $variables[ $variable_name ] = variable_get($variable_name, 0 );

    $variable_name = 'rdo_citation_'. $row->type;
    $variables[ $variable_name ] = variable_get($variable_name, 0 );
    
    $variable_name = 'pathauto_node_'. $row->type .'_pattern';
    $variables[ $variable_name ] = variable_get($variable_name, '' );
  }

  $variable_name = 'pathauto_node_pattern';
  $variables[ $variable_name ] = variable_get($variable_name, '' );
  
  $image_sizes = array();
  $variable_name = 'image_sizes';
  $image_sizes = variable_get($variable_name, '' );
  $variables[ $variable_name ] = $image_sizes;

  //site name variable
  $variables['artmob_config_site_name'] = variable_get('artmob_config_site_name', '');;

  $result['variables'] = $variables;

  
  //Build blackout list
  $blackout_list = array();
  $query = db_query( 'SELECT * FROM {am_blackout_list} order by type, field' );
  while ($item = db_fetch_object($query) ) {
    $blackout_list[$item->type][$item->field] = $item->blackout_mode;
  }
  $result['blackout_list'] = $blackout_list;
  
  //BUILD IMAGECACHE SECTION
  if (module_exists('imagecache')) {
   $imagecache = array();
   $query = db_query( 'SELECT * FROM {imagecache_preset} p
                        LEFT JOIN {imagecache_action} n on p.presetid = n.presetid
                        order by n.presetid' );
    while ($item = db_fetch_object($query) ) {
      $data = $item->data;
      $item->width = $data->width;
      $item->height = $data->height;
      $item->upscale = $data->upscale;
      $imagecache[] = $item;
    }

    $result['imagecache'] = $imagecache;
    
  }

  //BUILD VIEWS SECTION
  if (module_exists('views')) {
    $views_array = array();
    $query = db_query( "SELECT name from {view_view} order by name");
    while ($item = db_fetch_object($query) ) {
      $view_object = views_get_view($item->name);
      if ( $view_object ) {
  $views_array[$item->name] = $view_object;
      }
    }
    $result['view'] = $views_array;
  }

  return $result;
}

function artmob_config_clear_database_settings() {
// We cannot delete the roles because
//when we put them back, they have different
//rids.
//  db_query( "DELETE FROM {role}" );
//  We could also delete all roles except 1 and 2 since they are drupal defined
//  db_query( "DELETE FROM {role} WHERE rid <> 1 and rid <> 2" );
  db_query( "DELETE FROM {permission}" );
  db_query( "DELETE FROM {vocabulary}" );
  db_query( "DELETE FROM {vocabulary_node_types}" );
  db_query( "DELETE FROM {node_type}" );
  db_query( "DELETE FROM {term_data}" );

  //reset the image attach variables to their default
  $query = db_query( "SELECT * FROM {node_type} ");
  while ($row = db_fetch_object($query) ) {
    variable_set( 'image_attach_'. $row->type, 0 );
    variable_set( 'image_attach_size_teaser_'. $row->type, IMAGE_THUMBNAIL );
    variable_set( 'image_attach_weight_teaser_'. $row->type, 0 );
    variable_set( 'image_attach_size_body_'. $row->type, IMAGE_THUMBNAIL );
    variable_set( 'image_attach_weight_body_'. $row->type, 0 );
  }
  db_query('UPDATE {am_blackout_list} set blackout_mode = 0' );
  if ( module_exists( 'imagecache' ) ) {
    db_query( "DELETE FROM {imagecache_action}" );
    db_query( "DELETE FROM {imagecache_preset}" );
  }
}

function artmob_config_full_restore_profile() {
  artmob_config_restore_profile( TRUE );
}

function artmob_config_partial_restore_profile() {
  artmob_config_restore_profile( FALSE );
}
function artmob_config_restore_profile( $clear_database = TRUE ) {
  $profile_name = arg(2);
  $config = array();
  $query = db_query( "SELECT * FROM {artmob_config} WHERE name = '%s'", $profile_name );
  while ($row = db_fetch_object($query)) {
    $config = unserialize($row->settings);
    if ( $clear_database ) {
      artmob_config_clear_database_settings();
    }
    artmob_config_decode_config( $config );
    $profile_restore = TRUE;
    break;
  }
  if ( $profile_restore ) {
    drupal_set_message( "Profile '". $profile_name ."' restored successfully'" );
  }
  drupal_goto( 'admin/artmob/auto_config' );
}

function artmob_config_delete_profile() {
  $profile_name = arg(2);
  $config = array();
  $query = db_query( "SELECT * FROM {artmob_config} WHERE name = '%s'", $profile_name );
  while ($row = db_fetch_object($query)) {
    db_query( "DELETE FROM {artmob_config} WHERE name = '%s'", $profile_name );
    $profile_delete = TRUE;
    break;
  }
  if ( $profile_delete ) {
    drupal_set_message( "Profile '". $profile_name ."' was deleted successfully'" );
  }
  drupal_goto( 'admin/artmob/auto_config' );
}

function artmob_config_make_view_contributor_list() {
  $view = new stdClass();
  $view->name = 'contributors_list';
  $view->description = '';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = TRUE;
  $view->page_title = 'Authors';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'display_teasercols';
  $view->url = 'authors';
  $view->use_pager = FALSE;
  $view->nodes_per_page = '100';
  $view->block = TRUE;
  $view->block_title = 'Contributors';
  $view->block_header = '';
  $view->block_header_format = '1';
  $view->block_footer = '';
  $view->block_footer_format = '1';
  $view->block_empty = 'There are no articles in the archive at the moment.';
  $view->block_empty_format = '1';
  $view->block_type = 'table';
  $view->nodes_per_block = '100';
  $view->block_more = FALSE;
  $view->block_use_page_header = FALSE;
  $view->block_use_page_footer = FALSE;
  $view->block_use_page_empty = FALSE;
  $view->sort = array(
    array(
      'position' => 1,
      'tablename' => 'node',
      'field' => 'node.title',
      'sortorder' => 'ASC',
      'options' => '',
      'id' => 'node.title',
    ),
  );
  $view->argument = array();
  $view->field = array(
    array(
      'tablename' => 'node',
      'field' => 'title',
      'label' => '',
      'handler' => 'views_handler_field_nodelink',
      'options' => 'link',
    ),
    array(
      'tablename' => 'node',
      'field' => 'link',
      'label' => '',
    ),
  );
  $view->filter = array(
    array(
      'position' => 1,
      'tablename' => 'node',
      'field' => 'node.status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
      'id' => 'node.status',
    ),
    array(
      'position' => 2,
      'tablename' => 'node',
      'field' => 'node.type',
      'operator' => 'OR',
      'options' => '',
      'value' => array( 0 => 'Contributor'),
      'id' => 'node.type',
    ),
  );
  $view->exposed_filter = array();
  $view->requires = array(node);
  return $view;
}

function artmob_config_make_view_articles_list() {
  $view = new stdClass();
  $view->name = 'articles_list';
  $view->description = '';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = TRUE;
  $view->page_title = 'Articles';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'teaser';
  $view->url = 'articles';
  $view->use_pager = FALSE;
  $view->nodes_per_page = '100';
  $view->block = TRUE;
  $view->block_title = '';
  $view->block_header = '';
  $view->block_header_format = '1';
  $view->block_footer = '';
  $view->block_footer_format = '1';
  $view->block_empty = '';
  $view->block_empty_format = '1';
  $view->block_type = 'am_teaser_no_tab';
  $view->nodes_per_block = '100';
  $view->block_more = FALSE;
  $view->block_use_page_header = FALSE;
  $view->block_use_page_footer = FALSE;
  $view->block_use_page_empty = FALSE;
  $view->sort = array(
    array(
      'tablename' => 'node',
      'field' => 'node.title',
      'sortorder' => 'ASC',
      'options' => '',
      'id' => 'node.title',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.created',
      'sortorder' => 'ASC',
      'options' => 'normal',
      'id' => 'node.created',
    ),
  );
  $view->argument = array();
  $view->field = array();
  $view->filter = array(
      array(
      'tablename' => 'node',
      'field' => 'node.status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
      'id' => 'node.status',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.type',
      'operator' => 'OR',
      'options' => '',
      'value' => array( 0 => 'Articles'),
      'id' => 'node.type',
    ),
  );
  $view->exposed_filter = array();
  $view->requires = array(node);
  return $view;
}

function artmob_config_make_view_audio_page() {
  $view = new stdClass();
  $view->name = 'audio';
  $view->description = 'Creates the audio page.';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = TRUE;
  $view->page_title = '';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'am_alphabet';
  $view->url = 'media/audio';
  $view->use_pager = FALSE;
  $view->nodes_per_page = '10';
  $view->sort = array(
    array(
      'tablename' => 'node',
      'field' => 'node.title',
      'sortorder' => 'ASC',
      'options' => '',
      'id' => 'node.title',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.created',
      'sortorder' => 'ASC',
      'options' => 'normal',
      'id' => 'node.created',
    ),
  );
  $view->argument = array( );
  $view->field = array( );
  $view->filter = array(
    array(
      'tablename' => 'node',
      'field' => 'node.status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
      'id' => 'node.status',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.type',
      'operator' => 'OR',
      'options' => '',
      'value' => array(0 => 'audio'),
      'id' => 'node.type',
    ),
  );
  $view->exposed_filter = array( );
  $view->requires = array(node);
  return $view;
}

function artmob_config_make_view_digitized_works_page() {
  $view = new stdClass();
  $view->name = 'digitized_works';
  $view->description = 'Block listing for digitized works page.';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = TRUE;
  $view->page_title = 'Digitized Works';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'am_alphabet';
  $view->url = 'media/digitized_works';
  $view->use_pager = FALSE;
  $view->nodes_per_page = '10';
  $view->sort = array(
    array(
      'tablename' => 'node',
      'field' => 'node.title',
      'sortorder' => 'ASC',
      'options' => '',
      'id' => 'node.title',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.created',
      'sortorder' => 'ASC',
      'options' => 'normal',
      'id' => 'node.created',
    ),
  );
  $view->argument = array( );
  $view->field = array( );
  $view->filter = array(
    array(
      'tablename' => 'node',
      'field' => 'node.status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
      'id' => 'node.status',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.type',
      'operator' => 'OR',
      'options' => '',
      'value' => array( 0 => 'DigitizedWorks'),
      'id' => 'node.type',
    ),
  );
  $view->exposed_filter = array( );
  $view->requires = array(node, am_citation);
  return $view;
}

function artmob_config_make_view_pictures_page() {
  $view = new stdClass();
  $view->name = 'pictures';
  $view->description = 'Listing for image pages';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = TRUE;
  $view->page_title = 'Photographs and other Images';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'am_alphabet';
  $view->url = 'media/images';
  $view->use_pager = FALSE;
  $view->nodes_per_page = '100';
  $view->sort = array(
    array(
      'tablename' => 'node',
      'field' => 'node.title',
      'sortorder' => 'ASC',
      'options' => '',
      'id' => 'node.title',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.created',
      'sortorder' => 'ASC',
      'options' => 'normal',
      'id' => 'node.created',
    ),
  );
  $view->argument = array( );
  $view->field = array(
    array(
      'tablename' => 'node',
      'fullname' => 'node.title',
      'queryname' => 'node_title',
      'field' => 'title',
      'label' => '',
      'handler' => 'views_handler_field_nodelink',
      'options' => 'link',
      'id' => 'node.title',
    ),
    array(
      'tablename' => 'node',
      'fullname' => 'node.created',
      'queryname' => 'node_created',
      'field' => 'created',
      'label' => '',
      'handler' => 'views_handler_field_date_small',
      'id' => 'node.created',
    ),
  );
  $view->filter = array(
    array(
      'tablename' => 'node',
      'field' => 'node.status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
      'id' => 'node.status',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.type',
      'operator' => 'OR',
      'options' => '',
      'value' => array( 0 => 'amPicture', ),
      'id' => 'node.type',
    ),
  );
  $view->exposed_filter = array( );
  $view->requires = array(node);
  return $view;
}

function artmob_config_make_view_video_page() {
  $view = new stdClass();
  $view->name = 'video';
  $view->description = 'Listing for video page.';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = TRUE;
  $view->page_title = 'Videos';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'am_alphabet';
  $view->url = 'media/videos';
  $view->use_pager = FALSE;
  $view->nodes_per_page = '100';
  $view->sort = array(
    array(
      'tablename' => 'node',
      'field' => 'node.title',
      'sortorder' => 'ASC',
      'options' => '',
      'id' => 'node.title',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.created',
      'sortorder' => 'ASC',
      'options' => 'normal',
      'id' => 'node.created',
    ),
  );
  $view->argument = array( );
  $view->field = array(
    array(
      'tablename' => 'node',
      'field' => 'title',
      'fullname' => 'node.title',
      'queryname' => 'node_title',
      'label' => '',
      'handler' => 'views_handler_field_nodelink',
      'options' => 'link',
      'id' => 'node.title',
    ),
    array(
      'tablename' => 'node',
      'field' => 'created',
      'fullname' => 'node.created',
      'queryname' => 'node_created',
      'label' => '',
      'handler' => 'views_handler_field_date_small',
      'id' => 'node.created',
    ),
  );
  $view->filter = array(
    array(
      'tablename' => 'node',
      'field' => 'node.status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
      'id' => 'node.status',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.type',
      'operator' => 'OR',
      'options' => '',
      'value' => array( 0 => 'amVideo'),
      'id' => 'node.type',
    ),
  );
  $view->exposed_filter = array();
  $view->requires = array(node);
  return $view;
}

function artmob_config_make_view_exhibit_by_category_page() {
  $view = new stdClass();
  $view->name = 'Exhibit_by_category_joe_1';
  $view->description = 'Exhibit item view by category';
  $view->access = array();
  $view->view_args_php = '<?php $view->gridcount = 2; ?>';
  $view->page = TRUE;
  $view->page_title = 'Exhibition';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'table';
  $view->url = 'exhibits/term_joe_1/$arg';
  $view->use_pager = FALSE;
  $view->nodes_per_page = '5';
  $view->block = TRUE;
  $view->block_title = 'Exhibition';
  $view->block_header = 'This exhibit is extremely pertinent to HUMANITY and thensome.';
  $view->block_header_format = '1';
  $view->block_footer = '<ul><li><a href="this">this</a><li>this other</ul>';
  $view->block_footer_format = '1';
  $view->block_empty = 'sorry constructing exhibit';
  $view->block_empty_format = '1';
  $view->block_type = 'table';
  $view->nodes_per_block = '1';
  $view->block_more = TRUE;
  $view->block_use_page_header = FALSE;
  $view->block_use_page_footer = FALSE;
  $view->block_use_page_empty = TRUE;
  $view->sort = array(
    array(
      'tablename' => 'node',
      'field' => 'node.sticky',
      'sortorder' => 'DESC',
      'options' => '',
      'id' => 'node.sticky',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.created',
      'sortorder' => 'ASC',
      'options' => 'normal',
      'id' => 'node.created',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.created',
      'sortorder' => 'DESC',
      'options' => 'normal',
      'id' => 'node.created',
    ),
  );
  $view->argument = array(
    array(
      'type' => 'taxid',
      'argdefault' => '1',
      'title' => '%1',
      'options' => '0',
      'wildcard' => '',
      'wildcard_substitution' => '',
    ),
    array(
      'type' => 'node_feed',
      'argdefault' => '2',
      'title' => '',
      'options' => '',
      'wildcard' => '',
      'wildcard_substitution' => '',
    ),
  );
  $view->field = array(
    array(
      'tablename' => 'image',
      'field' => 'nid',
      'fullname' => 'image.nid',
      'queryname' => 'image_nid',
      'label' => 'Image',
      'handler' => 'image_views_handler_image_img_link',
      'options' => 'thumbnail',
      'id' => 'image.nid',
    ),
    array(
      'tablename' => 'node',
      'field' => 'title',
      'fullname' => 'node.title',
      'queryname' => 'node_title',
      'label' => 'Title',
      'handler' => 'views_handler_field_nodelink',
      'sortable' => '1',
      'options' => 'link',
      'id' => 'node.title',
    ),
    array(
      'tablename' => 'node',
      'field' => 'created',
      'fullname' => 'node.created',
      'queryname' => 'node_created',
      'label' => 'Posted on',
      'handler' => 'views_handler_field_date_custom',
      'sortable' => '1',
      'options' => 'M, d, Y',
      'id' => 'node.created',
    ),
  );
  $view->filter = array(
    array(
      'tablename' => 'node',
      'field' => 'node.status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
      'id' => 'node.status',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.type',
      'operator' => 'OR',
      'options' => '',
      'value' => array( 0 => 'audio', 1 => 'image', 2 => 'video', 3 => 'Articles', 4 => 'DigitizedWorks'),
      'id' => 'node.type',
    ),
  );
  $view->exposed_filter = array( );
  $view->requires = array(node, image);
  return $view;
}

function artmob_config_make_view_exhibit_by_category_name_page() {
  $view = new stdClass();
  $view->name = 'Exhibit_by_category_name';
  $view->description = 'Exhibit item view by category name';
  $view->access = array();
  $view->view_args_php = '<?php $view->gridcount = 2; ?>';
  $view->page = TRUE;
  $view->page_title = 'Exhibition';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'table';
  $view->url = 'exhibits/name/$arg';
  $view->use_pager = FALSE;
  $view->nodes_per_page = '5';
  $view->block = TRUE;
  $view->block_title = 'Exhibition';
  $view->block_header = 'This exhibit is extremely pertinent to HUMANITY and thensome.';
  $view->block_header_format = '1';
  $view->block_footer = '<ul><li><a href="this">this</a><li>this other</ul>';
  $view->block_footer_format = '1';
  $view->block_empty = 'sorry constructing exhibit';
  $view->block_empty_format = '1';
  $view->block_type = 'table';
  $view->nodes_per_block = '1';
  $view->block_more = TRUE;
  $view->block_use_page_header = FALSE;
  $view->block_use_page_footer = FALSE;
  $view->block_use_page_empty = TRUE;
  $view->sort = array(
    array(
      'tablename' => 'node',
      'field' => 'node.sticky',
      'sortorder' => 'DESC',
      'options' => '',
      'id' => 'node.sticky',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.created',
      'sortorder' => 'ASC',
      'options' => 'normal',
      'id' => 'node.created',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.created',
      'sortorder' => 'DESC',
      'options' => 'normal',
      'id' => 'node.created',
    ),
  );
  $view->argument = array(
    array(
      'type' => 'taxletter',
      'argdefault' => '1',
      'title' => '%1',
      'options' => '0',
      'wildcard' => '',
      'wildcard_substitution' => '',
    ),
  );
  $view->field = array(
    array(
      'tablename' => 'image',
      'field' => 'nid',
      'fullname' => 'image.nid',
      'queryname' => 'image_nid',
      'label' => 'Image',
      'handler' => 'image_views_handler_image_img_link',
      'options' => 'thumbnail',
      'id' => 'image.nid',
    ),
    array(
      'tablename' => 'node',
      'field' => 'title',
      'fullname' => 'node.title',
      'queryname' => 'node_title',
      'label' => 'Title',
      'handler' => 'views_handler_field_nodelink',
      'sortable' => '1',
      'options' => 'link',
      'id' => 'node.title',
    ),
    array(
      'tablename' => 'node',
      'field' => 'created',
      'fullname' => 'node.created',
      'queryname' => 'node_created',
      'label' => 'Posted on',
      'handler' => 'views_handler_field_date_custom',
      'sortable' => '1',
      'options' => 'M, d, Y',
      'id' => 'node.created',
    ),
  );
  $view->filter = array(
    array(
      'tablename' => 'node',
      'field' => 'node.status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
      'id' => 'node.status',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.type',
      'operator' => 'OR',
      'options' => '',
      'value' => array( 0 => 'Articles', 1 => 'DigitizedWorks', 2 => 'audio', 3 => 'image', 4 => 'video', 5 => 'am_picture'),
      'id' => 'node.type',
    ),
  );
  $view->exposed_filter = array( );
  $view->requires = array(node, image);
  return $view;
}

function artmob_config_make_view_exhibit_block() {
  $view = new stdClass();
  $view->name = 'Exhibit_view';
  $view->description = '';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = FALSE;
  $view->page_title = '';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'am_alphabet';
  $view->url = 'exhibits';
  $view->use_pager = FALSE;
  $view->nodes_per_page = '24';
  $view->block = TRUE;
  $view->block_title = '';
  $view->block_header = '';
  $view->block_header_format = '1';
  $view->block_footer = '';
  $view->block_footer_format = '1';
  $view->block_empty = 'There are no exhibits on the site at the moment. Check back soon!';
  $view->block_empty_format = '1';
  $view->block_type = 'teaser';
  $view->nodes_per_block = '10';
  $view->block_more = FALSE;
  $view->block_use_page_header = FALSE;
  $view->block_use_page_footer = FALSE;
  $view->block_use_page_empty = FALSE;
  $view->sort = array(
    array(
      'tablename' => 'node',
      'field' => 'node.created',
      'sortorder' => 'DESC',
      'options' => 'normal',
      'id' => 'node.created',
    ),
  );
  $view->argument = array(
    array(
      'type' => 'nodeletter',
      'argdefault' => '1',
      'title' => '',
      'options' => '1',
      'wildcard' => '*',
      'wildcard_substitution' => 'all',
    ),
  );
  $view->field = array(
    array(
      'tablename' => 'node',
      'field' => 'title',
      'fullname' => 'node.title',
      'queryname' => 'node_title',
      'label' => '',
      'handler' => 'views_handler_field_nodelink',
      'options' => 'link',
      'id' => 'node.title',
    ),
    array(
      'tablename' => 'node',
      'field' => 'created',
      'fullname' => 'node.created',
      'queryname' => 'node_created',
      'label' => 'created time',
      'handler' => 'views_handler_field_date_small',
      'sortable' => '1',
      'id' => 'node.created',
    ),
    array(
      'tablename' => 'Exhibit',
      'field' => 'StartDate',
      'fullname' => 'Exhibit.StartDate',
      'queryname' => 'Exhibit_StartDate',
      'label' => '',
      'handler' => 'views_handler_field_date_small',
      'sortable' => '1',
      'defaultsort' => 'ASC',
      'id' => 'Exhibit.StartDate',
    ),
    array(
      'tablename' => 'Exhibit',
      'field' => 'StopDate',
      'fullname' => 'Exhibit.StopDate',
      'queryname' => 'Exhibit_StopDate',
      'label' => '',
      'handler' => 'views_handler_field_date_small',
      'id' => 'Exhibit.StopDate',
    ),
  );
  $view->filter = array(
    array(
      'tablename' => 'node',
      'field' => 'node.type',
      'operator' => 'OR',
      'options' => '',
      'value' => array( 0 => 'Exhibit'),
      'id' => 'node.type',
    ),
  );
  $view->exposed_filter = array( );
  $view->requires = array(node, Exhibit);
  return $view;
}

function artmob_config_make_view_front_page_block() {
  $view = new stdClass();
  $view->name = 'front_page';
  $view->description = 'Recently Added';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = FALSE;
  $view->page_title = '';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'node';
  $view->url = '';
  $view->use_pager = FALSE;
  $view->nodes_per_page = '10';
  $view->block = TRUE;
  $view->block_title = 'Recently Added';
  $view->block_header = '';
  $view->block_header_format = '1';
  $view->block_footer = '';
  $view->block_footer_format = '1';
  $view->block_empty = '';
  $view->block_empty_format = '1';
  $view->block_type = 'am_alphabet';
  $view->nodes_per_block = '18';
  $view->block_more = FALSE;
  $view->block_use_page_header = FALSE;
  $view->block_use_page_footer = FALSE;
  $view->block_use_page_empty = FALSE;
  $view->sort = array(
    array(
      'tablename' => 'node',
      'field' => 'node.title',
      'sortorder' => 'ASC',
      'options' => '',
      'id' => 'node.title',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.created',
      'sortorder' => 'DESC',
      'options' => 'normal',
      'id' => 'node.created',
    ),
  );
  $view->argument = array( );
  $view->field = array( );
  $view->filter = array(
    array(
      'tablename' => 'node',
      'field' => 'node.status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
      'id' => 'node.status',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.promote',
      'operator' => '=',
      'options' => '',
      'value' => '1',
      'id' => 'node.promote',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.type',
      'operator' => 'OR',
      'options' => '',
      'value' => array( 0 => 'audio', 1 => 'video', 2 => 'amPicture', 3 => 'Articles', 4 => 'DigitizedWorks'
),
      'id' => 'node.type',
    ),
  );
  $view->exposed_filter = array( );
  $view->requires = array(node);
  return $view;
}

function artmob_config_make_view_links_block() {
  $view = new stdClass();
  $view->name = 'links';
  $view->description = '';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = FALSE;
  $view->page_title = '';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'node';
  $view->url = '';
  $view->use_pager = FALSE;
  $view->nodes_per_page = '10';
  $view->block = TRUE;
  $view->block_title = '';
  $view->block_header = '';
  $view->block_header_format = '1';
  $view->block_footer = '';
  $view->block_footer_format = '1';
  $view->block_empty = '';
  $view->block_empty_format = '1';
  $view->block_type = 'teaser';
  $view->nodes_per_block = '20';
  $view->block_more = FALSE;
  $view->block_use_page_header = FALSE;
  $view->block_use_page_footer = FALSE;
  $view->block_use_page_empty = FALSE;
  $view->sort = array( );
  $view->argument = array( );
  $view->field = array( );
  $view->filter = array(
    array(
      'tablename' => 'node',
      'field' => 'node.status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
      'id' => 'node.status',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.type',
      'operator' => 'OR',
      'options' => '',
      'value' => array( 0 => 'weblinks'),
      'id' => 'node.type',
    ),
  );
  $view->exposed_filter = array( );
  $view->requires = array(node);
  return $view;
}

function artmob_config_make_view_news_page() {
  $view = new stdClass();
  $view->name = 'news';
  $view->description = 'Site News Page';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = TRUE;
  $view->page_title = 'News';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = 'There are currently no news items on the site.';
  $view->page_empty_format = '1';
  $view->page_type = 'teaser';
  $view->url = 'news';
  $view->use_pager = FALSE;
  $view->nodes_per_page = '20';
  $view->sort = array(
    array(
      'tablename' => 'node',
      'field' => 'node.created',
      'sortorder' => 'DESC',
      'options' => 'normal',
      'id' => 'node.created',
    ),
  );
  $view->argument = array( );
  $view->field = array( );
  $view->filter = array(
    array(
      'tablename' => 'node',
      'field' => 'node.status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
      'id' => 'node.status',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.type',
      'operator' => 'OR',
      'options' => '',
      'value' => array( 0 => 'story'),
      'id' => 'node.type',
    ),
  );
  $view->exposed_filter = array( );
  $view->requires = array(node);
  return $view;
}

function artmob_config_make_view_recent_news_block() {
  $view = new stdClass();
  $view->name = 'recent_news';
  $view->description = '';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = FALSE;
  $view->page_title = '';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'node';
  $view->url = '';
  $view->use_pager = FALSE;
  $view->nodes_per_page = '10';
  $view->block = TRUE;
  $view->block_title = 'Recent News';
  $view->block_header = '';
  $view->block_header_format = '1';
  $view->block_footer = '';
  $view->block_footer_format = '1';
  $view->block_empty = '';
  $view->block_empty_format = '1';
  $view->block_type = 'list';
  $view->nodes_per_block = '10';
  $view->block_more = FALSE;
  $view->block_use_page_header = FALSE;
  $view->block_use_page_footer = FALSE;
  $view->block_use_page_empty = FALSE;
  $view->sort = array(
    array(
      'tablename' => 'node',
      'field' => 'node.created',
      'sortorder' => 'DESC',
      'options' => 'normal',
      'id' => 'node.created',
    ),
  );
  $view->argument = array( );
  $view->field = array(
    array(
      'tablename' => 'node',
      'field' => 'title',
      'fullname' => 'node.title',
      'queryname' => 'node_title',
      'label' => '',
      'handler' => 'views_handler_field_nodelink',
      'options' => 'link',
      'id' => 'node.title',
    ),
  );
  $view->filter = array(
    array(
      'tablename' => 'node',
      'field' => 'node.status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
      'id' => 'node.status',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.type',
      'operator' => 'OR',
      'options' => '',
      'value' => array( 0 => 'story'),
      'id' => 'node.type',
    ),
  );
  $view->exposed_filter = array( );
  $view->requires = array(node);
  return $view;
}

function artmob_config_make_view_taxonomy_term_page() {
  $view = new stdClass();
  $view->name = 'taxonomy_term';
  $view->description = 'The taxonomy view with a depth of 0.';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = TRUE;
  $view->page_title = 'Taxonomy';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'table';
  $view->url = 'taxonomy/term';
  $view->use_pager = FALSE;
  $view->nodes_per_page = '5';
  $view->block = TRUE;
  $view->block_title = 'Teaser of Taxonomy Exhibitions';
  $view->block_header = 'Teaser';
  $view->block_header_format = '1';
  $view->block_footer = '';
  $view->block_footer_format = '1';
  $view->block_empty = 'THis is not setup';
  $view->block_empty_format = '1';
  $view->block_type = 'list';
  $view->nodes_per_block = '3';
  $view->block_more = TRUE;
  $view->block_use_page_header = FALSE;
  $view->block_use_page_footer = TRUE;
  $view->block_use_page_empty = TRUE;
  $view->sort = array(
    array(
      'tablename' => 'node',
      'field' => 'node.sticky',
      'sortorder' => 'DESC',
      'options' => '',
      'id' => 'node.sticky',
    ),
    array(
      'tablename' => 'node',
      'field' => 'node.created',
      'sortorder' => 'DESC',
      'options' => 'normal',
      'id' => 'node.created',
    ),
  );
  $view->argument = array(
    array(
      'type' => 'taxid',
      'argdefault' => '1',
      'title' => '%1',
      'options' => '0',
      'wildcard' => '',
      'wildcard_substitution' => '',
    ),
    array(
      'type' => 'node_feed',
      'argdefault' => '2',
      'title' => '',
      'options' => '',
      'wildcard' => '',
      'wildcard_substitution' => '',
    ),
  );
  $view->field = array(
    array(
      'tablename' => 'node',
      'field' => 'title',
      'fullname' => 'node.title',
      'queryname' => 'node_title',
      'label' => 'title',
      'handler' => 'views_handler_field_nodelink',
      'sortable' => '1',
      'defaultsort' => 'ASC',
      'options' => 'link',
      'id' => 'node.title',
    ),
    array(
      'tablename' => 'node',
      'field' => 'created',
      'fullname' => 'node.created',
      'queryname' => 'node_created',
      'label' => 'createdate',
      'handler' => 'views_handler_field_date_custom',
      'sortable' => '1',
      'options' => 'M,d,y',
      'id' => 'node.created',
    ),
    array(
      'tablename' => 'image',
      'field' => 'nid',
      'fullname' => 'image.nid',
      'queryname' => 'image_nid',
      'label' => 'image',
      'handler' => 'image_views_handler_image_img',
      'options' => 'thumbnail',
      'id' => 'image.nid',
    ),
  );
  $view->filter = array(
    array(
      'tablename' => 'node',
      'field' => 'node.status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
      'id' => 'node.status',
    ),
  );
  $view->exposed_filter = array( );
  $view->requires = array(node, image);
  return $view;
}

function artmob_config_make_view_browse_all_content_ajax() {
  $view = new stdClass();
  $view->name = 'browse_all_content_ajax';
  $view->description = 'the main content browser';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = TRUE;
  $view->page_title = 'Browse All Content';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = '';
  $view->page_empty_format = '1';
  $view->page_type = 'am_alphabet';
  $view->url = 'browse/content';
  $view->use_pager = FALSE;
  $view->nodes_per_page = '6';
  $view->sort = array(
    array(
      'tablename' => 'node',
      'field' => 'node.title',
      'sortorder' => 'ASC',
      'options' => '',
      'id' => 'node.title',
    ),
    array(
      'tablename' => 'node_data_field_archival_date',
      'field' => 'node_data_field_archival_date.field_archival_date_value',
      'sortorder' => 'DESC',
      'options' => '',
      'id' => 'node_data_field_archival_date.field_archival_date_value',
    ),
  );
  $view->argument = array(
    array(
      'type' => 'nodetype',
      'argdefault' => '1',
      'title' => 'Type %1',
      'options' => '',
      'wildcard' => 'all',
      'wildcard_substitution' => 'all',
    ),
    array(
      'type' => 'nodeletter',
      'argdefault' => '1',
      'title' => '',
      'options' => '1',
      'wildcard' => 'all',
      'wildcard_substitution' => 'all',
    ),
  );
  $view->field = array(
    array(
      'tablename' => 'node',
      'field' => 'title',
      'fullname' => 'node.title',
      'queryname' => 'node_title',
      'label' => '',
      'handler' => 'views_handler_field_nodelink',
      'options' => 'link',
      'id' => 'node.title',
    ),
  );
  $view->filter = array( );
  $view->exposed_filter = array( );
  $view->requires = array(node, node_data_field_archival_date);
  return $view;
}

