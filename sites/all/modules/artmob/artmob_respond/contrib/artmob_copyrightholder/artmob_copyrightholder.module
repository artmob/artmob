<?php

/**
 * hook_elements - define the widget type
 */
function artmob_copyrightholder_elements() {
	$type = array();
	$type['artmob_copyrightholder'] = array( '#input' => TRUE, );
	return $type;
}

// ***************************************************************************
// EXPAND WIDGET FUNCTIONS
// ***************************************************************************

/**
 * Called by #process for widget emements
 *
 * Don't know what arg2 is or why it is there
 */
function artmob_copyrightholder_expand($element, $arg2, $node) {
  if ( count($arg2) == 1 ){
  	$element[$name] = array();
	  return $element;
  }

	$name = $element['#name']; // name of this widget, set in the containing form
	$edit = $element['#post']; // get the posted parameters

	// set flag so nodeapi can find the widget
	if($node->type){
		variable_set('artmob_copyrightholder_' . $node->type, TRUE );
//		drupal_set_message( 'am_ setting artmob_copyrightholder_'.$node->type.' to true' );
	}

	// create a tree of the names of all widgets in the form -- needed for formapi:insert
	$element['copyrightholder_widget_names'] = array(
		'#type' => 'item',
		'#tree' => TRUE,
	);
	$element['copyrightholder_widget_names'][$name] = array (
		'#type' => 'hidden',
		'#value' => $name,
	);

	// put in wrapper that will allow contents to be swapped out by the js update
	$element[$name] = array (
		'#tree' => TRUE,
	    '#prefix' => '<div id="widget_wrapper_' . $name .'">',
	    '#suffix' => '</div>',
	    '#ahah_bindings' => array(
	    	array (
	    		'selector' => 'input.widget_remove_' . $name,
		    	'wrapper' => 'widget_wrapper_' . $name,
	    		'event' => 'click',
	  			'path' => 'artmob_copyrightholder/widget_update_js',
	  			'params' => array( 'widget_name_js' => $name ),
	    	),
	   ),
	);

	// actually build the widget and put it in the wrapper
	$element[$name] += _artmob_copyrightholder_build_widget( $name, $edit[$name], $node );
	return $element;
}


function _artmob_copyrightholder_build_widget($name, $edit, $node=NULL) {
	// get the preexisting subwidgets - can be in either $edit or $node
	$subwidgets = _artmob_copyrightholder_extract_subwidgets($name, $edit, $node);
	// process add and remove commands - modifies $subwidgets
	$subwidgets = _artmob_copyrightholder_process_subwidget_commands( $name, $edit, $subwidgets );
	// expand the $subwidgets array into form elements - modifies $element
	$widget = _artmob_copyrightholder_expand_subwidgets( $name, $subwidgets );
	// add a control block for adding new subwidgets - modifies $element
	$widget += _artmob_copyrightholder_add_new_subwidget_control( $name, $edit );

	return $widget;
}

/**
 * Extract the widget description from the post array
 * If post is empty, we may be doing an edit -> load into node
 * Or fresh add with no widgets
 */
function _artmob_copyrightholder_extract_subwidgets($name, $edit, $node) {
  //This can cause a problem when you remove the last widget
  //because it would then take what was loaded
  //which was the previous settings before the edit.
  //See the silly work-around above in the _expand function
	$subwidgets = array();

	if( is_array( $edit['subwidgets'] ) ) {
		$subwidgets = $edit['subwidgets'];
	}
	elseif( is_array($node->$name) ) {
		// widgets have been loaded into node (by apinode:load)
		$widget = $node->$name;
		$subwidgets = $widget['subwidgets'];
	}
	return $subwidgets;
}

/**
 * Modify the subwidgets array based on commands in the $edit
 * Side effect: if subwidget is successfully added, remove entry from $edit
 */
function _artmob_copyrightholder_process_subwidget_commands( $name, &$edit, $subwidgets ) {
	if( is_array($edit) && count($edit) > 0 ) {
		// process the potention addition...what is potention???
		$new_subwidget = $edit['new_subwidget'];
		//we need the first and last name or the contributor selected
  	if( ( $new_subwidget['firstname'] and $new_subwidget['lastname']) || $new_subwidget['contributor_nid']) {
			$subwidget_id = db_next_id('subwidget'); // get distinct id for subwidget (overkill but easy)
			$subwidgets[$subwidget_id] = $new_subwidget;
			// remove from params, so it doesn't show up on the form (consume), but only on successful add
			unset( $edit['new_subwidget'] );
		}

		// now process the removes
		foreach( $subwidgets as $subwidget_id => $subwidget ) {
			if( isset( $subwidget['remove'] ) )  {
// 				drupal_set_message( "_artmob_copyrightholder_process_subwidget_commands: deleting subwidget: $subwidget_id from widget $name" );
				unset( $subwidgets[$subwidget_id] );
			}
		}
	}
	return $subwidgets;
}

/**
 * Expand the subwidgets into form elements
 */
function _artmob_copyrightholder_expand_subwidgets( $name, $subwidgets ) {
	$element['subwidgets'] = array (
	  	'#tree' => TRUE,
	    '#attributes' => array( 'id' => 'widget_subwidgets_' . $name ),
	    '#theme' => 'artmob_copyrightholder_subwidgets',
	);
	foreach( $subwidgets as $subwidget_id => $subwidget ) {
    $contributor_name[$subwidget_id] = artmob_contributor_BuildContributorList();

		$element['subwidgets'][$subwidget_id] = array(
		  	'#tree' => TRUE,
		);
		$element['subwidgets'][$subwidget_id]['contributor_nid'] = array(
			'#type'			=> 'select',
			'#options'		=> $contributor_name[$subwidget_id],
	  	'#default_value' => $subwidget['contributor_nid'],
		);

		$element['subwidgets'][$subwidget_id]['firstname'] = array(
      '#type'          => 'textfield',
      '#size'          => 10,
      '#default_value' => $subwidget['firstname'],
      '#required'      => false,
		);
		/*
		$element['subwidgets'][$subwidget_id]['middlenames'] = array(
      '#type'          => 'textfield',
      '#title'         => t(''),
      '#size'          => 10,
      '#default_value' => $subwidget['middlenames'],
      '#required'      => false,
		);
		*/
		$element['subwidgets'][$subwidget_id]['lastname'] = array(
      '#type'          => 'textfield',
      '#size'          => 10,
      '#default_value' => $subwidget['lastname'],
      '#required'      => false,
		);
		$element['subwidgets'][$subwidget_id]['remove'] = array(
		  	'#type' => 'checkbox',
		  	'#default_value' => $subwidget['remove'],
		    '#attributes' => array( 'class' => 'widget_remove_' . $name ),
		);
	}
	return $element;
}

/**
 * control to add subwidget to widget
 */
function _artmob_copyrightholder_add_new_subwidget_control($name, $edit) {
//  drupal_set_message( 'inside add new subwidget control' );
	$element['new_subwidget'] = array (
	    '#type' => 'fieldset',
	    '#title' => t( 'Add copyright holder from profile' ),
	    '#theme' => 'artmob_copyrightholder_new_subwidget',
	    '#tree' => TRUE,
	);

  $contributor_name = artmob_contributor_BuildContributorList();
	$element['new_subwidget']['contributor_nid'] = array(
		'#type'			=> 'select',
		'#title'		=> 'Profile',
		'#options'		=> $contributor_name,
    '#value' => $edit['new_subwidget']['contributor_nid'],
	);

	$element['new_subwidget']['firstname'] = array (
      '#type'          => 'textfield',
      '#title'         => t('First Name'),
      '#size'          => 10,
	    '#value' => $edit['new_subwidget']['firstname'] ? $edit['new_subwidget']['firstname'] : '',
      '#required'      => false,
	);
	/*
	$element['new_subwidget']['middlenames'] = array (
      '#type'          => 'textfield',
      '#title'         => t('Middle Names'),
      '#size'          => 10,
	    '#value' => $edit['new_subwidget']['middlenames'] ? $edit['new_subwidget']['middlenames'] : '',
      '#required'      => false,
	);
	*/
	$element['new_subwidget']['lastname'] = array (
      '#type'          => 'textfield',
      '#title'         => t('Last Name'),
      '#size'          => 10,
	    '#value' => $edit['new_subwidget']['lastname'] ? $edit['new_subwidget']['lastname'] : '',
      '#required'      => false,
	);
	$element['new_subwidget']['add_subwidget_button'] = array (
	    '#type' => 'button',
	    '#value' => t( 'Add New Copyright Holder' ),
      '#id' => 'widget_add_subwidget_button_' . $name,
      '#ahah_bindings' => array (
    		array(
  	    	'wrapper' => 'widget_wrapper_' . $name,
     			'event' => 'click',
    			'path' => 'artmob_copyrightholder/widget_update_js',
  				'params' => array( 'widget_name_js' => $name ),
  			),
  		),
	);
	return $element;
}

// ****************************************************************
// JAVASCRIPT FUNCTIONS
// ****************************************************************

/**
 * hook_menu - incremental update needs its own entry point
 */
function artmob_copyrightholder_menu($may_cache) {
	$items = array();
	if (!$may_cache) {
		$items[] = array(
	      'path' => 'artmob_copyrightholder/widget_update_js',
	      'callback' => '_artmob_copyrightholder_update_js',
	      'access' => TRUE,
	      'type' => MENU_CALLBACK,
		);
	}
	return $items;
}
/**
 * Called by javascript to do AJAH based form updating
 */
function _artmob_copyrightholder_update_js() {
	$name = $_POST['widget_name_js'];
//	drupal_set_message( 'copyrightholder update js name = '.$name );
	print _artmob_copyrightholder_build_widget_js( $name, $_POST );
}

// Pulled out of widget_update_js for easier testing
function _artmob_copyrightholder_build_widget_js( $name, $edit ) {
	$widget[$name] = array ( '#tree' => TRUE, );
	$widget[$name] += _artmob_copyrightholder_build_widget( $name, $edit[$name] );

	$form = form_builder( 'ahah_widget', $widget );
//	drupal_set_message( "artmob_copyrightholder Rebuilt Widget " . $name );
	return theme('status_messages') . drupal_render($form);
}

// ********************************************************************************
// WIDGET_NODEAPI - handle the database interactions
// ********************************************************************************

/**
 * hook_nodeapi
 */
function artmob_copyrightholder_nodeapi( &$node, $op ) {
  if( variable_get( 'artmob_copyrightholder_'. $node->type, FALSE ) ) {
//		drupal_set_message( "artmob_copyrightholder Widget_nodeapi: $op , $node->type" );//. dprint_r($node, TRUE) );
		switch($op) {
			// info flow db -> node -> form -> node -> db
			case load: // Load Widgets in from db
//				drupal_set_message( "artmob_copyrightholder Load Widgets in from db" );
				$result = db_query('SELECT widget_name, subwidget_id, firstname, middlenames, lastname, contributor_nid ' .
				                      'FROM {am_copyrightholder} ' .
				                      'WHERE nid = %d '.
									  'ORDER BY subwidget_id', $node->nid);
				while ($row = db_fetch_array($result)) {
					$widget_name = $row['widget_name'];
					$subwidget_id = $row['subwidget_id'];
					if( !is_array( $additions[$widget_name] ) ) {
						$additions[$widget_name] = array();
						$additions[$widget_name]['subwidgets'] = array();
					}
					$additions[$widget_name]['subwidgets'][$subwidget_id] = array (
				    	'firstname' => $row['firstname'],
				    	'middlenames' => $row['middlenames'],
				    	'lastname' => $row['lastname'],
				    	'contributor_nid' => $row['contributor_nid'],
					);
					$widget_names[$widget_name] = $widget_name; // rebuild widget name list
  				$additions['copyrightholder_widget_names'][$widget_name] = $widget_name;
				}
				return $additions;
				break;
			case view:
				// just prove that the widgets are there - assume some .tpl file will actually shape output
  				//The widget_names will be null if no widget is attached
				break;
			case update:
				// keep life simple and do update by just deleting and then inserting
				db_query("DELETE FROM {am_copyrightholder} WHERE nid = '%d'", $node->nid );
			case insert:
        if ( count( $node->copyrightholder_widget_names ) ){
  				foreach( $node->copyrightholder_widget_names as $widget_name ) {
  //          if ($widget['subwidgets'] ){
  //          if ($widget_name == 'widgetam1' ){
    					$widget = $node->$widget_name;
  //     			  drupal_set_message( "copyrightholder  subwidget count = ".count( $widget['subwidgets'] ) );
            if (count( $widget['subwidgets'] ) != 0 ){
      				foreach( $widget['subwidgets'] as $subwidget_id => $subwidget ) {
  //      			  drupal_set_message( "copyrightholder Inserting $node->nid, $widget_name, $subwidget_id");
  //!!! to do - do not save the name information but if contributor_nid = 0 then
              //try to find firstname, lastname in contributor table
              //if found then change contributor_nid to this
              //if not found then insert a new contributor
              //and update contributor_nid with this new nid
                if ( $subwidget['contributor_nid'] == 0 ){
                  $nid = 0;
                  $result = db_query( "SELECT nid from {am_contributor} where first_name = '%s' and last_name = '%s'",$subwidget['firstname'], $subwidget['lastname'] );
           				while ($row = db_fetch_object($result)) {
                    $nid = $row->nid;
                    //drupal_set_message( 'contributor found. nid = '.$row->nid );
                    break;
                  }
                  if ( $nid == 0 ){
                    if (( $subwidget['firstname'] <> '' ) and ( $subwidget['lastname'] <> '' )) {
                      //add this person as a contributor
                      global $user;
                      $contributor_node->nid = '';
                      $contributor_node->uid = $user->uid;
                      $contributor_node->type = 'Contributor';
                      $contributor_node->status = 1;
                      $contributor_node->first_name = $subwidget['firstname'];
                      $contributor_node->last_name = $subwidget['lastname'];
                      $contributor_node->title = $subwidget['firstname'].' '.$subwidget['lastname'];
                      node_save( $contributor_node);
                      $nid = $contributor_node->nid;
                      //drupal_set_message( 'saved nid = '.$nid );
                    }
                  }
                } else {
                  $nid = $subwidget['contributor_nid'];
                }
      					if ( $nid <> 0 ){
        					db_query ("INSERT INTO {am_copyrightholder} ".
        		  					"(nid, widget_name, subwidget_id, contributor_nid) ".
        		  					" VALUES (%d, '%s', %d, %d)",
        					      $node->nid, $widget_name, $subwidget_id,
        					      $nid
        					);
        				}
      				}
      			}
  //  				}
  				}
  			}
				break;
		}
	}
}

// ************************************************************************************
// THEMING FUNCTIONS
// ************************************************************************************

/**
 * Make sure the widget acutally shows up on the form
 */
function theme_artmob_copyrightholder($element) {
	$output .= theme('form_element', $element, $element['#children']);
	return $output;
}

/**
 * Theme the subwidgets as a table, one subwidget per row
 */
function theme_artmob_copyrightholder_new_subwidget(&$form) {
	$rows = array();
	$row = array();
	$row[] = drupal_render($form['contributor_nid']);
	$row[] = drupal_render($form['firstname']);
	$row[] = drupal_render($form['lastname']);
	$rows[] = $row;
	$output = theme('table', array('class'=>''), $rows);
	$output .= drupal_render($form);
	return $output;
}

function artmob_copyrightholder_sort_by_subwidget_id($a, $b) {
	if ($a['subwidget_id'] == $b['subwidget_id']) {
		return 0;
	}
	return ($a['subwidget_id'] < $b['subwidget_id']) ? -1 : 1;
}

/**
 * Theme the add new subwidget subform as a single row.
 */
function theme_artmob_copyrightholder_subwidgets(&$form) {
	foreach (element_children($form) as $key) {
		$row = array();
		$row[] = drupal_render($form[$key]['remove']);
		$row[] = drupal_render($form[$key]['contributor_nid']);
		$row[] = drupal_render($form[$key]['firstname']);
		$row[] = drupal_render($form[$key]['lastname']);
		//sort by the key (subwidget_id)
		$rows[] = array( 'data' => $row, 'class' => 'sortableitem', 'subwidget_id' => $key );
	}
	if( count($rows) > 0 ) {
		usort( $rows, artmob_copyrightholder_sort_by_subwidget_id ); // sort the subwidgets by weight
		$header = array( t('Remove'), t('Profile'), t('First Name'), t('Last Name'));
		$output = theme('table', $header, $rows, array( 'class' => 'sortable', 'id' => $form['#attributes']['id'] ) );
	}
	$output .= drupal_render($form);
	return $output;
}


