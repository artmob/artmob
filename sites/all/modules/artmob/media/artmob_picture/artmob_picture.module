<?php
// $Id: artmob_picture.info,v 1.0 2008/03/13 20:55:33 dries Exp $

/* @file
 * ADDDOCUMENTATION
 **/

//----------------------------------------------
// CONSTANTS
//----------------------------------------------

//* Implementation of hook_node_info().
//Note that module must match the module name
function artmob_picture_node_info() {
  return array(
    'amPicture' => array(
      'name' => t('Picture'),
      'module' => 'artmob_picture',
      'description' => t("Add a new image to your Artmob archive."),
      'has_title' => TRUE,
      'title_label' => t( 'Title' ),
      'has_body' => TRUE,
      'body_title' => t('Description')
    ),
  );
}

function artmob_picture_access($op, $node) {
  global $user;

  if ($op == 'create') {
    // Only registered users can create Articles.
    return user_access('Add Artmob Media');
  }

  else if ($op == 'update') {
    if ( $user->uid == $node->uid ){
      return user_access('Edit Own Artmob Media');
    } else {
      return user_access('Edit Artmob Media');
    }
  }
  else if ($op == 'delete') {
    return user_access('Remove Artmob Media');
  }
  else if ($op == 'view') {
    return user_access('View Artmob Media');
  }
  else {
    return FALSE;
  }
}


//----------------------------------------------
/**
 * Implementation of hook_help().
 */
function artmob_picture_help($section) {
  switch ($section) {
    case 'admin/help#artmob_picture':
      $output = '<p>'. t('The artmob_picture module shell for cck image field') .'</p>';
      return $output;
    case 'admin/modules#description':
    case 'admin/settings/artmob_picture':
      return (t('Contains a shell for the image upload cck field.'));
  }
}

//----------------------------------------------
/**
 * Implementation of hook_menu().
 */
function artmob_picture_menu($may_cache) {
  $items = array();

  if ($may_cache) {
  } 
  else {
  }
  return $items;
}

function artmob_picture_admin_settings() {
}

// Implementation of hook_form().
function artmob_picture_form(&$node) {

  $type = node_get_types('type', $node);

  $form['amPicture'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Picture'),
    '#weight'        => -5,
    '#collapsible'   => TRUE,
    '#collapsed'     => FALSE
  );

  $form['amPicture']['title'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Title'),
    '#default_value' => $node->title,
    '#description'   => ARTMOB_MEDIA_TITLE_HELP,
    '#tree'          => 'FALSE',
    '#required'      => True,
    '#weight'        => -8,
  );

 $form['amPicture']['body'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Description'),
    '#default_value' => $node->body,
    '#description'   => ARTMOB_MEDIA_DESCRIPTION_HELP,
    '#tree'          => 'FALSE',
    '#rows'          => 10,
    '#required'      => FALSE
  );
  $form['amPicture']['format'] = filter_form($node->format);

  return $form;

}

//--------------------------------------------------------------------
//This hook is used to add form fields to the forms
//of other module's add node screens.  The fields
//are defined here just as they were in the hook_form hook.
function artmob_picture_form_alter($form_id, &$form) {
  // boilerplate code to determine the node type of the form
  if (isset($form['type'])) {
      $type = $form['type']['#value'];
    }
  elseif (isset($form['orig_type'])) {
      $type = $form['orig_type']['#value'];
    }
  else {
    return;
  }


  switch ($form_id) {
    // Form addition to all Enabled node types.  
    case $type .'_node_form':
      break;
     case 'node_type_form':
      break;
  }
}

/**
 * Implementation of hook_nodeapi().
 *
*/
function artmob_picture_nodeapi(&$onode, $op, $teaser=NULL, $page=NULL) {
  switch ($op) {
    case 'update':
      $bupdate = TRUE;

      //Fall through, with flag.  Therefore with every update we delete
      //the old associated records and then resave the new ones

    case 'delete':
      if (!$bupdate) {
        break;
      }

    case 'insert':
      break;
    case 'load':
      return $aload;
      break;
    case 'prepare':
      break;
    case 'view':
     break;
    case 'delete revision':
      break;
    case 'submit':
      break;
  }
}

//----------------------------------------------
function artmob_picture_user($op, &$edit, &$currentuser) {
  global $user;
  switch ($op) {
    case 'load':
    case 'view':
    case 'form':
  };
}

//----------------------------------------------
function artmob_picture_view($node, $teaser = FALSE, $page = FALSE) {
  if ($page) {
    $node->body = check_markup($node->body, $node->format, FALSE);
    $node->content['body'] = array('#value' => theme( 'artmob_picture_basic_view_page', $node, $page ));
  } 
  else {
    $node->teaser = check_markup($node->teaser, $node->format, FALSE);
    $node->content['body'] = array('#value' => theme( 'artmob_picture_basic_view_teaser', $node, $page ));
  }
  return $node;
}

//----------------------------------------------
function theme_artmob_picture_basic_view_page( &$node, $page ) {
  $content = '';
  $content .= $node->body;
  return $content;
}

//----------------------------------------------
function theme_artmob_picture_basic_view_teaser( &$node, $page ) {
  $content = '';
  $content .= $node->teaser;
  return $content;
}

