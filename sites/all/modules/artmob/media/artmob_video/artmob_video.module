<?php
// $Id: amVideo.info,v 1.0 2008/03/13 20:55:33 dries Exp $

/* @file
 * ADDDOCUMENTATION
 **/

//----------------------------------------------
// CONSTANTS
//----------------------------------------------

//* Implementation of hook_node_info().
//Note that module must match the module name
function artmob_video_node_info() {
  return array(
    'amVideo' => array(
      'name' => t('Video'),
      'module' => 'artmob_video',
      'description' => t("Add a Video to your Artmob Archive."),
      'has_title' => TRUE,
      'title_label' => t( 'Title' ),
      'has_body' => TRUE,
      'body_title' => t('Description')
    ),
  );
}

//----------------------------------------------
/**
 * Implementation of hook_help().
 */
function artmob_video_help($section) {
  switch ($section) {
    case 'admin/help#artmob_video':
      $output = '<p>'. t('The artmob video module uses the Flowplayer open source video player.  For more information on Flowplayer visit <a href="http://www.flowplayer.org">their site</a>.') .'</p>';
      return $output;
    case 'admin/modules#description':
    case 'admin/settings/artmob_video':
      return (t('The artmob video module uses FlashVideo module and the Flowplayer open source video player.  For more information on Flowplayer visit <a href="http://www.flowplayer.org">their site</a>'));
  }
}

function artmob_video_init() {
   $path = drupal_get_path('module', 'artmob_video');
   $jspath = $path .'/js/flowplayer-3.1.0.min.js';
   $csspath = $path .'/css/artmob_video.css';
   
   drupal_add_css($csspath);
   drupal_add_js($jspath);
   
}


// Implementation of hook_access().

function artmob_video_access($op, $node) {
  global $user;

  if ($op == 'create') {
    // Only registered users can create Articles.
    return user_access('Add Artmob Media');
  }

  else if ($op == 'update') {
    if ( $user->uid == $node->uid ){
      return user_access('Edit Own Artmob Media');
    } else {
      return user_access('Edit Artmob Media');
    }
  }
  else if ($op == 'delete') {
    return user_access('Remove Artmob Media');
  }
  else if ($op == 'view') {
    return user_access('View Artmob Media');
  }
  else {
    return FALSE;
  }
}

//----------------------------------------------
/**
 * Implementation of hook_menu().
 */
function artmob_video_menu($may_cache) {
  $items = array();

  if ($may_cache) {
  } 
  else {
  }
  return $items;
}

function artmob_video_admin_settings() {
}

// Implementation of hook_form().
function artmob_video_form($node) {

  $type = node_get_types('type', $node);

  $form['amVideo'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Video'),
    '#weight'        => -5,
    '#collapsible'   => TRUE,
    '#collapsed'     => FALSE
  );

  $form['amVideo']['title'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Title'),
    '#default_value' => $node->title,
    '#description'   => ARTMOB_MEDIA_TITLE_HELP,
    '#tree'          => 'FALSE',
    '#required'      => True,
    '#weight'        => -8,
  );

 $form['amVideo']['body'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Description'),
    '#default_value' => $node->body,
    '#description'   => ARTMOB_MEDIA_DESCRIPTION_HELP,
    '#tree'          => 'FALSE',
    '#rows'          => 10,
    '#required'      => FALSE
  );
  $form['amVideo']['format'] = filter_form($node->format);

  return $form;

}

//--------------------------------------------------------------------
//This hook is used to add form fields to the forms
//of other module's add node screens.  The fields
//are defined here just as they were in the hook_form hook.
function artmob_video_form_alter($form_id, &$form) {
  // boilerplate code to determine the node type of the form
  if (isset($form['type'])) {
      $type = $form['type']['#value'];
    }
  elseif (isset($form['orig_type'])) {
      $type = $form['orig_type']['#value'];
    }
  else {
    return;
  }


  switch ($form_id) {
    // Form addition to all Enabled node types.  
    case $type .'_node_form':
      break;
     case 'node_type_form':
      break;
  }
}

/**
 * Implementation of hook_nodeapi().
 *
*/
function artmob_video_nodeapi(&$onode, $op, $teaser=NULL, $page=NULL) {
  switch ($op) {
    case 'update':
      $bupdate = TRUE;

      //Fall through, with flag.  Therefore with every update we delete
      //the old associated records and then resave the new ones

    case 'delete':
      if (!$bupdate) {
        break;
      }

    case 'insert':
      break;
    case 'load':
      return $aload;
      break;
    case 'prepare':
      break;
    case 'view':
     break;
    case 'delete revision':
      break;
    case 'submit':
      break;
  }
}

//----------------------------------------------
function artmob_video_user($op, &$edit, &$currentuser) {
  global $user;
  switch ($op) {
    case 'load':
    case 'view':
    case 'form':
  };
}

function artmob_video_view($node, $teaser = FALSE, $page = FALSE) {
  if ($teaser) {
     $node->teaser = check_markup($node->teaser, $node->format, FALSE);
    $node->content['artmob_video']['#value'] = theme( 'artmob_video_teaser', $node, $page );
  } 
  
  if ($page) {
    
    list($width, $height) = array_values(artmob_video_get_video_dimensions());
  
    $node->body = check_markup($node->body, $node->format, FALSE);
    $node->content['artmob_video']['#value'] = theme( 'artmob_video_video', $node, $page, $width, $height);
    $node->content['artmob_video']['#weight'] = -2;
    $node->content['body']['#value'] = theme('artmob_video_page', $node, $page);
    $node->content['body']['#weight'] = 2;
    
  }
    
  return $node;
}

function artmob_video_get_video_dimensions() {
  // TO DO: make configurable
  
  return array(
    'width' => 550,
    'height' => 413
  );

}

function theme_artmob_video_teaser( $node, $page ) {
  $content = '';
  $content .= $node->teaser;
  return $content;
}

function theme_artmob_video_page( $node, $page ) {

  $content .= $node->body;
  
  return $content;


}

function theme_artmob_video_video($node, $page, $video_width, $video_height, $flowplayer_js='flowplayer-3.1.0.min.js') {
  global $base_url;
  
  $file_path = artmob_video_extract_video($node->files);
  $files_path = base_path() . file_directory_path();
  $vidplayer_path = base_path() . drupal_get_path('module','artmob_video');
  
  if ($file_path) {
    $module_path = $base_url . base_path() . drupal_get_path('module', 'artmob_video');
    $content .= "<div class='artmob-video-player'>\n";
    $content .= '<script src="'. $module_path .'/'. $flowplayer_js .'"></script>';
    $content .= "<a class='myPlayer' href='{$base_url}/{$file_path}' style='display:block;width:{$video_width}px;height:{$video_height}px'></a>\n";
    $content .= '<script language="JavaScript"> flowplayer("a.myPlayer", "'. $vidplayer_path .'/flowplayer.swf",{ clip: { autoPlay: false } }); </script>';
      $content .= "</div>\n";
  } 
  else {
      $content .= "<p>This video content is currently not available.</p>";
  }
  
  return $content;
}

function artmob_video_extract_video(&$files) {
  // quick helper function to determine path of attached video.  returns the path if a file attachment has proper extension.
  // TO: make extension list dynamic  

    if (!is_array($files)) {
      return NULL;
    }
    
    $extensions = array(
      'mpg', 'mov', 'flv', 'avi', 'mp4', 'f4v'  
    );

  
    foreach ( $files as $file ) {
      if ($file->filepath) {
      $path = $file->filepath;
      $path_elements = explode('.', $path);
      $extension = array_pop($path_elements);
      if (in_array($extension, $extensions)) {
        return $path;
      }
      }
    }
    
    return NULL;

}
