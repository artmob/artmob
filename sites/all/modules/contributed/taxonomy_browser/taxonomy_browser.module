<?php
// $Id: taxonomy_browser.module,v 1.19.2.31 2008/08/14 14:27:13 nancyw Exp $
// Original by Moshe Weitzman (weitzmna@tejasa.com)

/**
 * @file
 *   Enables users to construct their own view of content from terms across 
 *   multiple vocabularies.
 */

//*******************************************************************
//* Drupal Hooks : General Overview
//*******************************************************************

/**
 * Implementation of hook_menu().
 */
function taxonomy_browser_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/taxonomy-browser',
      'title' => t('Taxonomy Browser'),
      'description' => t('Set usage guidelines and included vocabularies.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'taxonomy_browser_admin_settings',
      'access' => user_access('administer site configuration'),    
      );
  }
  else {
    $items[] = array(
      'path' => 'taxonomy_browser',
      'title' => t('Category Browser'),
      'access' => user_access(variable_get('taxonomy_browser_need_perm', FALSE) ? 'access taxonomy browser' : 'access content'),
      'callback' => 'taxonomy_browser_page',
      'description' => t('Find content on your own terms.'),
      'type' => MENU_NORMAL_ITEM,
      );

    drupal_add_css(drupal_get_path('module', 'taxonomy_browser') .'/taxonomy_browser.css');
  }

  return $items;
}

/**
 * Implementation of hook_help().
 */
function taxonomy_browser_help($section = '') {
  switch ($section) {
    case 'admin/modules#description':
      return t('An interface for viewing content grouped by arbitrary taxonomy terms.');
    case 'taxonomy_browser':
      $output = check_markup(variable_get('taxonomy_browser_guidelines', _taxonomy_browser_guidelines_default()));
      if (user_access('administer site configuration')) {
        $output .= '<p class="links">'. l(t('Go to Taxonomy Browser settings'), 'admin/settings/taxonomy-browser', array(), drupal_get_destination()) .'</p>';
      }
      return $output;
  }
}

/**
 * Implementation of hook_perm().
 */
function taxonomy_browser_perm() {
  if (variable_get('taxonomy_browser_need_perm', FALSE)) {
    return array('access taxonomy browser');
  }
  else {
    return array();
  }
}

//********************************************************************
//* Drupal Hooks : Core
//********************************************************************

/**
 * Implementation of hook_block().
 */
function taxonomy_browser_block($op = 'list', $delta = 0, $edit = array()) {
  $block = array();
  switch ($op) {
    case 'list':
      $block[0]['info'] = t('Category browser');
      return $block;

    case 'view':
      switch ($delta) {
        case 0:
          $block = _taxonomy_browser_block_view($delta);
          break;
      }
      return $block;
//
//    case 'configure':
//      return _taxonomy_browser_block_configure($delta);
//
//    case 'save':
//      _taxonomy_browser_block_save($delta, $edit);
  }
}

/**
 * Implementation of hook_form().
 */
function taxonomy_browser_admin_settings() {
  if (!module_exists('node_type_filter') && !drupal_set_message()) {
    drupal_set_message(t('You do not have the node_type_filter module installed. This means that the "restrict search by content type" option will not be available on the category browser page.'), 'status');
  }

  drupal_add_js(drupal_get_path('module', 'taxonomy_browser') .'/taxonomy_browser.js', 'module');
  
  $form['taxonomy_browser_guidelines'] = array(
    '#title' => t('Guidelines'),
    '#type' => 'textarea',
    '#default_value' => variable_get('taxonomy_browser_guidelines', _taxonomy_browser_guidelines_default()),
    '#rows' => 2,
    '#description' => t('Instructions which should appear at top of the category browser main page'),
    );
  
  $form['taxonomy_browser_select_type'] = array(
    '#title' => t('Selection type'),
    '#type' => 'radios',
    '#default_value' => variable_get('taxonomy_browser_select_type', 1),
    '#options' => array(t('Selection box'), t('Check boxes')),
    '#description' => t('This option determines whether the user will see a selection list or check boxes.'),
    '#prefix' => '<div class="taxonomy_browser_radios">',
    '#suffix' => '</div>',
    );

  $form['taxonomy_browser_collapse'] = array(
    '#title' => t('Make vocabularies collapsible'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('taxonomy_browser_collapse', FALSE),
    '#description' => t('Do you want to display of the terms within a vocabulary to be collapsible? Requires "Check boxes" above.'),
    );

  $form['taxonomy_browser_default_op'] = array(
    '#title' => t('"Items containing" default'),
    '#type' => 'radios',
    '#default_value' => variable_get('taxonomy_browser_default_op', 0),
    '#options' => array(t('All'), t('Any')),
    '#description' => t('This option determines which "Items containing" choice is the default.'),
    '#prefix' => '<div class="taxonomy_browser_radios">',
    '#suffix' => '</div>',
    );
  
  $form['taxonomy_browser_count_nodes'] = array(
    '#title' => t('Show node count'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('taxonomy_browser_count_nodes', FALSE),
    '#description' => t('Do you want to display the count of nodes tagged with each term? This can be SQL-intensive.'),
    );
  
  $form['taxonomy_browser_show_unused'] = array(
    '#title' => t('Show unused terms'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('taxonomy_browser_show_unused', FALSE),
    '#description' => t('Do you want to display the term if no nodes are tagged with that term? This requires "Show node count" to be selected; if it is not seleted, all terms will be shown.'),
    );
  
  $form['taxonomy_browser_allow_children'] = array(
    '#title' => t('Allow child terms to be included'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('taxonomy_browser_allow_children', FALSE),
    '#description' => t('Do you want the user to see a check box to include child terms (sub-terms)?'),
    );

  $form['taxonomy_browser_need_perm'] = array(
    '#title' => t('Requires permission'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('taxonomy_browser_need_perm', FALSE),
    '#description' => t('Do you want to require permission to see the browser page?'),
    );

  $form['taxonomy_browser_show_types'] = array(
    '#title' => t('Show content types with vocabulary'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('taxonomy_browser_show_types', FALSE),
    '#description' => t('If checked, this option displays a list of the content types for which this vocabulary may be used.'),
    );

  $select = array();
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vocabulary) {
    $select[$vocabulary->vid] = $vocabulary->name;
  }

  $current_vocabs = variable_get('taxonomy_browser_vocabularies', array());
  // Occasionally we get a 0 vid in the array.
  unset($current_vocabs[0]);

  $form['taxonomy_browser_vocabularies'] = array(
    '#title' => t('Included Vocabularies'),
    '#type' => 'checkboxes',
    '#default_value' => $current_vocabs,
    '#options' => $select,
    '#description' => t('Select the vocabularies the user can select from on the category browser page.'),
    '#prefix' => '<div class="taxonomy_browser_checkboxes">',
    '#suffix' => '</div>',
    );

  if (module_exists('node_type_filter')) {
    $filter_options = node_get_types('names'); 
    $form['taxonomy_browser_omit'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Omit content types'),
      '#options' => $filter_options,
      '#default_value' => variable_get('taxonomy_browser_omit', array('')),
      '#description' => t('If any of these types is selected, it will be omitted from the list on the "Category Browser" page.'),
      '#prefix' => '<div class="taxonomy_browser_checkboxes">',
      '#suffix' => '</div>',
      );
  }

  return system_settings_form($form);
}

function taxonomy_browser_admin_settings_validate($form_id, &$form_values) {
  if ($form_values['taxonomy_browser_count_nodes'] == FALSE
    && $form_values['taxonomy_browser_show_unused'] == TRUE) {
    form_set_error('taxonomy_browser_show_unused', t('"Show unused" requires "count nodes."'));
  }
}

//********************************************************************
//* Module Functions : Public
//********************************************************************

/**
 * Menu callback: the query building interface for nodes selected based on 
 * taxonomy terms.
 */
function taxonomy_browser_page() {
  $output .= drupal_get_form('taxonomy_browser_form');
  return $output;
}

function taxonomy_browser_form() {
  $form = array();
  $selection_types = array('select', 'checkboxes');
  $select_type = $selection_types[variable_get('taxonomy_browser_select_type', 1)];
  $collapsible = variable_get('taxonomy_browser_collapse', FALSE) && ($select_type == 'checkboxes');
  $count_nodes = variable_get('taxonomy_browser_count_nodes', FALSE);
  $show_unused = variable_get('taxonomy_browser_show_unused', FALSE);
  $allow_children = variable_get('taxonomy_browser_allow_children', FALSE);
  $node_types = node_get_types('names');
  
  $form['scope'] = array(
    '#type' => 'fieldset',
    '#title' => t('Scope'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#attributes' => array('class' => 'taxonomy_browser_scope'),
    );

  if (module_exists('node_type_filter')) {
    if ($count_nodes) {
      $total_count = 0;
      $result = db_query('SELECT DISTINCT(type), COUNT(nid) AS count FROM {node} WHERE status=1 GROUP BY type ORDER BY type');
      while ($counter = db_fetch_array($result)) {
        // Check if we know about this type - a disabled module could have orphans.
        if (isset($node_types[$counter['type']])) {
          $node_types[$counter['type']] .= ' ('. $counter['count'] .')';
        }
        else {
          $node_types['unknown'] .= $counter['type'] .' ??? ('. $counter['count'] .') ';
          watchdog('Taxonomy Browser', 'Unknown content type found: @type', array('@type' => $counter['type']), WATCHDOG_WARNING);
        }
        $total_count += $counter['count'];
      }
    }

    $omit = array_filter(variable_get('taxonomy_browser_omit', array()));
    if (!empty($omit)) {
      foreach ($omit as $omit_type) {
        unset($node_types[$omit_type]);
      }
    }
    $desc = t('Not selecting any type is the same as selecting all types.');
    if ($count_nodes) {
      $desc .= ' '. t('The total count of all types is !count.', array('!count' => $total_count));
    }
    $form['scope']['node_filter'] = array(
//      '#type' => 'checkboxes',
      '#type' => $select_type,
      '#title' => t('Restrict search by content type'),
      '#options' => $node_types,
      '#multiple' => TRUE,
      '#prefix' => '<div class="taxonomy_browser_checkboxes">',
      '#suffix' => '</div>',
      '#description' => $desc,
      );
  }
  else {
    $form['scope']['node_filter'] = array(
      '#type' => value,
      '#value' => array(),
      );
  }

  $form['scope']['operator'] = array(
    '#type' => 'radios',
    '#title' => t('Items containing'),
    '#options' => array(t('<strong>all</strong> terms'), t('<strong>any</strong> terms')),
    '#default_value' => variable_get('taxonomy_browser_default_op', 0),
    '#prefix' => '<div class="taxonomy_browser_radios">',
    '#suffix' => '</div>',
    );

  $vocabularies = array_filter(variable_get('taxonomy_browser_vocabularies', array()));
  // Occasionally we get a 0 vid in the array.
  unset($vocabularies[0]);

  // Has the admin selected any vocabs?
  if (count($vocabularies) == 0) {
    $vocabs = taxonomy_get_vocabularies();
    foreach ($vocabs as $vocabulary) {
      $vocabularies[$vocabulary->vid] = 1;
    }
  }

  if ($allow_children) {
    $form['children'] = array(
      '#type' => 'fieldset',
      '#title' => t('Include Children'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      );
    $form['children']['include_children'] = array(
      '#type' => 'checkbox',
      '#title' => t('Automatically include children (sub-terms)'),
      '#description' => t('If you select a term with children (sub-terms), do you want those child terms automatically included in the search? This requires that "Items containing" be "any."'),
      );
  }
  else {
    $form['include_children'] = array(
      '#type' => 'value',
      '#value' => FALSE,
      );
  }

  $form['taxonomy'] = array(
    '#type' => 'fieldset',
    '#title' => t('Categories'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $selection_types = array('select', 'checkboxes');
  $i = 0;
  foreach ($vocabularies as $v => $sel) {
    $voc = taxonomy_get_vocabulary($v);

    $voc_node_types = array();
    if (isset($voc->nodes) && !empty($voc->nodes[0])) {
      foreach ($voc->nodes as $key => $type) {
        $voc_node_types[] = $node_types[$type];
      }
    }
    else {
      drupal_set_message(t('The %name vocabulary does not appear to be associated with any content types.', array('%name' => $voc->name)), 'error');
    }

    $count_types = count($voc_node_types);
    $node_type_list = implode(', ', $voc_node_types);

    $tree = taxonomy_get_tree($v);
    $term_opts = array();

    if ($tree) {
      foreach ($tree as $term) {
        $opt_string = NULL;
        if ($count_nodes) {
//          $count = db_result(db_query('SELECT COUNT(nid) FROM {term_node} WHERE tid=%d', $term->tid));
          $count = taxonomy_term_count_nodes($term->tid);
          if ($count > 0 || $show_unused) {
            $opt_string = decode_entities(check_plain($term->name)) .' ('. $count .')';
          }
        }
        else {
          $opt_string = decode_entities(check_plain($term->name));
        }
        if ($opt_string) {
          $term_opts[$term->tid] = str_repeat('-', $term->depth) . $opt_string;
        }
      }
    }

    $vocname = check_plain($voc->name);
    $description = $voc->description ? decode_entities(check_markup($voc->description)) : NULL;
    if (variable_get('taxonomy_browser_show_types', FALSE)) {
      $description .= t('"!name" is used for: !types.', array('!name' => '<strong>'. $vocname .'</strong>', '!types' => (empty($node_type_list) ? '<em>'. t('nothing') .'</em>' : $node_type_list)));
    }

    if (!empty($term_opts)) {
      $voc_element = array(
        '#type' => $select_type,
        '#title' => $vocname,
        '#options' => $term_opts,
        '#multiple' => TRUE,
        '#description' => $description,
        '#prefix' => '<div class="taxonomy_browser_'. $select_type .'">',
        '#suffix' => '</div>',
        '#field_suffix' => $node_type_list,
        '#weight' => $i,
        );

      if ($collapsible) {
        $fld_set = 'set'. $voc->vid;
        $form['taxonomy'][$fld_set] = array(
          '#type' => 'fieldset',
          '#title' => $vocname,
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          );
        $form['taxonomy'][$fld_set][$v] = $voc_element;
      }
      else {
        $form['taxonomy'][$v] = $voc_element;
      }
      ++$i;
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#submit' => TRUE,
    );

  return $form;
}

/**
 * Themable form output for the category browser page.
 */
function theme_taxonomy_browser_page($form) {
  $output = '';
  
  $vocabularies = variable_get('taxonomy_browser_vocabularies', array());
  if (empty($vocabularies)) {
    form_set_error('taxonomy_browser_page', t('You must select the vocabularies to display from the <a href="%link">taxonomy browser settings page</a>.', array('%link' => url('admin/settings/taxonomy_browser'))));
    return ' ';
  }
  
  $output .= drupal_render($form);
  return $output;
}

/**
 * Implementation of hook_form_validate().
 */
function taxonomy_browser_form_validate($form_id, &$form_values) {

  $include_children = $form_values['include_children'];
  $tids = _taxonomy_browser_get_tid_list($form_values['taxonomy'], $include_children);

  $operator = $form_values['operator'] ? 'or' : 'and';

  if ($operator == 'and' && $include_children == TRUE) {
    form_set_error('operator', t('You must use "Items containing <strong>any</strong>" to include child terms.'));
  }

  if (empty($tids)) {
    form_set_error('taxonomy', t('You must select at least one category in your search.'));
  }
  else {
//    $node_type = (isset($form_values['node_filter']) && $form_values['node_filter'] != 'all') ? $form_values['node_filter'] : NULL;
    $node_type = str_replace(',0', '', implode(',', $form_values['node_filter']));

    if (!taxonomy_browser_count_nodes($tids, $operator, 0, $node_type)) {
      form_set_error('taxonomy', t('No posts match your criteria.'));
    }
  }
}

/**
 * Implementation of hook_form_submit().
 */
function taxonomy_browser_form_submit($form_id, &$form_values) {
  $tids = _taxonomy_browser_get_tid_list();

  $operator = $form_values['operator'] ? 'or' : 'and';
  $str_tids = ($operator == 'and') ? implode(',', $tids) : implode('+', $tids);
  
  $types = array_filter($form_values['node_filter']);
  $node_type = str_replace(',0', '', implode(',', $types));
  
  if ($types) {
    return array('taxonomy/term/'. $str_tids, 'type='. $node_type);
  }
  else {
    return 'taxonomy/term/'. $str_tids;
  }
  
}

//********************************************************************
//* Module Functions : Private
//********************************************************************

/**
 * Get the output to be displayed by the block.
 *
 * @param
 *   $delta - integer for the block number.
 *
 * @return
 *   array containing the title ("subject") and content of the block.
 */
function _taxonomy_browser_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 0:
      $block = array(
        'content' => drupal_get_form('taxonomy_browser_form'),
        );
      break;
  }
  return $block;
}

/**
 * Private function to count the number of nodes found by the user's query.
 */
function taxonomy_browser_count_nodes($tids = array(), $operator = 'or', $depth = 0, $nodetype = NULL) {
  if (count($tids) > 0) {
    // For each term ID, generate an array of descendant term IDs to the right depth.
    $descendant_tids = array();
    if ($depth === 'all') {
      $depth = NULL;
    }
    foreach ($tids as $index => $tid) {
      $term = taxonomy_get_term($tid);
      $tree = taxonomy_get_tree($term->vid, $tid, -1, $depth);
      $descendant_tids[] = array_merge(array($tid), array_map('_taxonomy_get_tid_from_term', $tree));
    }

    $type_where = NULL;
    if ($nodetype) {
//      $type_where = "n.type = '". db_escape_string($nodetype) ."'";
      $type_where = "n.type IN ('". implode("', '", explode(',', db_escape_string($nodetype))) ."')";
    }

    if ($operator == 'or') {
      $str_tids = implode(',', call_user_func_array('array_merge', $descendant_tids));
      $sql_count = 'SELECT COUNT(n.nid) FROM {node} n INNER JOIN {term_node} tn USING(nid) WHERE '. ($type_where ? $type_where .' AND ' : NULL) ."tn.tid IN ($str_tids) ORDER BY n.sticky DESC, n.title ASC";
    }
    else {
      $joins = '';
      $wheres = array();
      if ($type_where) {
        $wheres[] = $type_where;
      }
      foreach ($descendant_tids as $index => $tids) {
        $joins .= 'INNER JOIN {term_node} tn'. $index .' ON n.nid = tn'. $index .'.nid ';
        $wheres[] = 'tn'. $index .'.tid IN ('. implode(',', $tids) .')';
      }
      $sql_count = 'SELECT COUNT(n.nid) FROM {node} n '. $joins .' WHERE '. implode(' AND ', $wheres);
    }

//    drupal_set_message('Count query: '. $sql_count);
    return db_result(db_query(db_rewrite_sql($sql_count)));
  }

  return 0;
}

/**
 * Transforms an unpredictably and irregularly nested set of tids (as returned 
 * from a taxonomy form) into a linear array of tids.
 */
function _taxonomy_browser_get_tid_list($tids = NULL, $include_children = FALSE) {
  static $tid_list;

  if (isset($tids) && is_array($tids)) {
    $tid_list = array();
    foreach ($tids as $key => $tid) {
      if (!empty($tid)) {
        if (is_array($tid)) {
          foreach ($tid as $key2 => $tid2) {
            if (!empty($tid2)) {
              $tid_list[$tid2] = $tid2;
            }
          }
        }
        else {
          $tid_list[$tid] = $tid;
        }
      } /* end !empty */
    } /* end foreach */
  }
  
  if ($include_children) {
    foreach ($tid_list as $tid) {
      _taxonomy_browser_get_kids($tid_list, $tid);
    }
  }

  return $tid_list;
}

function _taxonomy_browser_get_kids(&$tid_list, $tid) {
  $children = taxonomy_get_children($tid);
  if ($children) {
    foreach ($children as $child_tid => $child_term) {
      _taxonomy_browser_get_kids($tid_list, $child_tid);
    }
  }
  else {
    $tid_list[$tid] = $tid;
  }
}

/**
 * Provides default guideline text.
 */
function _taxonomy_browser_guidelines_default() {
  return t('<p>You may select multiple items from each list by holding down the <code>Ctrl</code> (Mac: <code>command</code>) key while left-clicking each item.</p>');
}
